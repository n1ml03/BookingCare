[{"/Users/namle/Desktop/fe-bookingcare/src/index.js":"1","/Users/namle/Desktop/fe-bookingcare/src/serviceWorker.js":"2","/Users/namle/Desktop/fe-bookingcare/src/redux.js":"3","/Users/namle/Desktop/fe-bookingcare/src/hoc/IntlProviderWrapper.js":"4","/Users/namle/Desktop/fe-bookingcare/src/containers/App.js":"5","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/HomePage.js":"6","/Users/namle/Desktop/fe-bookingcare/src/hoc/authentication.js":"7","/Users/namle/Desktop/fe-bookingcare/src/store/actions/actionTypes.js":"8","/Users/namle/Desktop/fe-bookingcare/src/store/reducers/rootReducer.js":"9","/Users/namle/Desktop/fe-bookingcare/src/routes/Home.js":"10","/Users/namle/Desktop/fe-bookingcare/src/routes/System.js":"11","/Users/namle/Desktop/fe-bookingcare/src/routes/Doctor.js":"12","/Users/namle/Desktop/fe-bookingcare/src/containers/Auth/Login.js":"13","/Users/namle/Desktop/fe-bookingcare/src/components/CustomScrollbars.js":"14","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/VerifyEmailBooking.js":"15","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/ListingDoctor.js":"16","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Clinic/DetailClinic.js":"17","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DetailDoctor.js":"18","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Clinic/ListingClinic.js":"19","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Handbook/ListingHandbook.js":"20","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Handbook/DetailHandbook.js":"21","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageDetail.js":"22","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/VerifyEmailBookingParkage.js":"23","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ListingParkage.js":"24","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Specialty/ListingSpecialty.js":"25","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Specialty/DetailSpecialty.js":"26","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/HeaderHomePage.js":"27","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/FooterHomePage.js":"28","/Users/namle/Desktop/fe-bookingcare/src/services/userService.js":"29","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Medical-Facility.js":"30","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Specialty.js":"31","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/about.js":"32","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Handbook.js":"33","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Outstainding-doctor.js":"34","/Users/namle/Desktop/fe-bookingcare/src/utils/index.js":"35","/Users/namle/Desktop/fe-bookingcare/src/store/reducers/appReducer.js":"36","/Users/namle/Desktop/fe-bookingcare/src/store/reducers/adminReducer.js":"37","/Users/namle/Desktop/fe-bookingcare/src/store/reducers/userReducer.js":"38","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/ProfileDoctor.js":"39","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DoctorExtraInfo.js":"40","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DoctorSchedule.js":"41","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageExtraInfo.js":"42","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageSchedule.js":"43","/Users/namle/Desktop/fe-bookingcare/src/utils/constant.js":"44","/Users/namle/Desktop/fe-bookingcare/src/containers/Header/Header.js":"45","/Users/namle/Desktop/fe-bookingcare/src/containers/System/UserManage.js":"46","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Specialty/ManageSpecialty.js":"47","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/UserRedux.js":"48","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Clinic/ManageClinic.js":"49","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManageSchedule.js":"50","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Handbook/ManageHandbook.js":"51","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Parkage/ManageParkage.js":"52","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/ManagePatientAdmin.js":"53","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Parkage/ManagePatientForParkage.js":"54","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManagePatient.js":"55","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/ManageDoctor.js":"56","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/Modal/ProfileParkage.js":"57","/Users/namle/Desktop/fe-bookingcare/src/store/actions/index.js":"58","/Users/namle/Desktop/fe-bookingcare/src/axios.js":"59","/Users/namle/Desktop/fe-bookingcare/src/utils/ToastUtil.js":"60","/Users/namle/Desktop/fe-bookingcare/src/utils/LanguageUtils.js":"61","/Users/namle/Desktop/fe-bookingcare/src/utils/KeyCodeUtils.js":"62","/Users/namle/Desktop/fe-bookingcare/src/utils/CommonUtils.js":"63","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/Modal/BookingModalParkage.js":"64","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/Modal/BookingModal.js":"65","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/RemedyModal.js":"66","/Users/namle/Desktop/fe-bookingcare/src/components/Input/DatePicker.js":"67","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/TableManageUser.js":"68","/Users/namle/Desktop/fe-bookingcare/src/utils/emitter.js":"69","/Users/namle/Desktop/fe-bookingcare/src/containers/Header/menuApp.js":"70","/Users/namle/Desktop/fe-bookingcare/src/containers/System/ModalEditUser.js":"71","/Users/namle/Desktop/fe-bookingcare/src/containers/System/ModalUser.js":"72","/Users/namle/Desktop/fe-bookingcare/src/components/Navigator.js":"73","/Users/namle/Desktop/fe-bookingcare/src/store/actions/adminAction.js":"74","/Users/namle/Desktop/fe-bookingcare/src/components/CustomToast.js":"75","/Users/namle/Desktop/fe-bookingcare/src/store/actions/userActions.js":"76","/Users/namle/Desktop/fe-bookingcare/src/store/actions/appActions.js":"77","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/SignUp.js":"78","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManageHistory.js":"79","/Users/namle/Desktop/fe-bookingcare/src/components/ConfirmModal.js":"80"},{"size":890,"mtime":1704548077827,"results":"81","hashOfConfig":"82"},{"size":5737,"mtime":1704548128950,"results":"83","hashOfConfig":"82"},{"size":1451,"mtime":1704548077458,"results":"84","hashOfConfig":"82"},{"size":1045,"mtime":1704548077549,"results":"85","hashOfConfig":"82"},{"size":5328,"mtime":1704549330760,"results":"86","hashOfConfig":"82"},{"size":1508,"mtime":1704548128941,"results":"87","hashOfConfig":"82"},{"size":770,"mtime":1704548079427,"results":"88","hashOfConfig":"82"},{"size":1989,"mtime":1704516620876,"results":"89","hashOfConfig":"82"},{"size":933,"mtime":1704548077734,"results":"90","hashOfConfig":"82"},{"size":595,"mtime":1704548077845,"results":"91","hashOfConfig":"82"},{"size":2776,"mtime":1704551466714,"results":"92","hashOfConfig":"82"},{"size":1391,"mtime":1704548077706,"results":"93","hashOfConfig":"82"},{"size":5515,"mtime":1704548075133,"results":"94","hashOfConfig":"82"},{"size":3061,"mtime":1704548075154,"results":"95","hashOfConfig":"82"},{"size":2358,"mtime":1704548128661,"results":"96","hashOfConfig":"82"},{"size":3745,"mtime":1704548113290,"results":"97","hashOfConfig":"82"},{"size":4288,"mtime":1704548918605,"results":"98","hashOfConfig":"82"},{"size":4354,"mtime":1704548113349,"results":"99","hashOfConfig":"82"},{"size":2924,"mtime":1704548079903,"results":"100","hashOfConfig":"82"},{"size":3374,"mtime":1704548128674,"results":"101","hashOfConfig":"82"},{"size":1986,"mtime":1704548128633,"results":"102","hashOfConfig":"82"},{"size":3307,"mtime":1704548128960,"results":"103","hashOfConfig":"82"},{"size":2355,"mtime":1704548129241,"results":"104","hashOfConfig":"82"},{"size":17890,"mtime":1704548128355,"results":"105","hashOfConfig":"82"},{"size":3392,"mtime":1704548128502,"results":"106","hashOfConfig":"82"},{"size":6975,"mtime":1704548128643,"results":"107","hashOfConfig":"82"},{"size":14684,"mtime":1704548862387,"results":"108","hashOfConfig":"82"},{"size":621,"mtime":1704548129045,"results":"109","hashOfConfig":"82"},{"size":6707,"mtime":1704548078327,"results":"110","hashOfConfig":"82"},{"size":2997,"mtime":1704548128997,"results":"111","hashOfConfig":"82"},{"size":3156,"mtime":1704548128382,"results":"112","hashOfConfig":"82"},{"size":1299,"mtime":1704548128527,"results":"113","hashOfConfig":"82"},{"size":3639,"mtime":1704548128715,"results":"114","hashOfConfig":"82"},{"size":4237,"mtime":1704548129010,"results":"115","hashOfConfig":"82"},{"size":246,"mtime":1704548077925,"results":"116","hashOfConfig":"82"},{"size":1072,"mtime":1704516620883,"results":"117","hashOfConfig":"82"},{"size":3472,"mtime":1704548077451,"results":"118","hashOfConfig":"82"},{"size":798,"mtime":1704516620885,"results":"119","hashOfConfig":"82"},{"size":5635,"mtime":1704548113401,"results":"120","hashOfConfig":"82"},{"size":6867,"mtime":1704548113522,"results":"121","hashOfConfig":"82"},{"size":7947,"mtime":1704548113331,"results":"122","hashOfConfig":"82"},{"size":6095,"mtime":1704548128653,"results":"123","hashOfConfig":"82"},{"size":6880,"mtime":1704548128475,"results":"124","hashOfConfig":"82"},{"size":1060,"mtime":1704548079037,"results":"125","hashOfConfig":"82"},{"size":2992,"mtime":1704552532267,"results":"126","hashOfConfig":"82"},{"size":5529,"mtime":1704552756829,"results":"127","hashOfConfig":"82"},{"size":9812,"mtime":1704553074176,"results":"128","hashOfConfig":"82"},{"size":16594,"mtime":1704548077998,"results":"129","hashOfConfig":"82"},{"size":10442,"mtime":1704552997721,"results":"130","hashOfConfig":"82"},{"size":7956,"mtime":1704552865326,"results":"131","hashOfConfig":"82"},{"size":9815,"mtime":1704553196605,"results":"132","hashOfConfig":"82"},{"size":21888,"mtime":1704553163131,"results":"133","hashOfConfig":"82"},{"size":9525,"mtime":1704552885434,"results":"134","hashOfConfig":"82"},{"size":9352,"mtime":1704553153491,"results":"135","hashOfConfig":"82"},{"size":7161,"mtime":1704548079498,"results":"136","hashOfConfig":"82"},{"size":17686,"mtime":1704552828774,"results":"137","hashOfConfig":"82"},{"size":4958,"mtime":1704548113303,"results":"138","hashOfConfig":"82"},{"size":90,"mtime":1704516620879,"results":"139","hashOfConfig":"82"},{"size":386,"mtime":1704548077531,"results":"140","hashOfConfig":"82"},{"size":2944,"mtime":1704548075123,"results":"141","hashOfConfig":"82"},{"size":927,"mtime":1704516620893,"results":"142","hashOfConfig":"82"},{"size":652,"mtime":1704548078981,"results":"143","hashOfConfig":"82"},{"size":339,"mtime":1704516620892,"results":"144","hashOfConfig":"82"},{"size":12557,"mtime":1704548128700,"results":"145","hashOfConfig":"82"},{"size":12444,"mtime":1704548113248,"results":"146","hashOfConfig":"82"},{"size":3521,"mtime":1704548077415,"results":"147","hashOfConfig":"82"},{"size":5784,"mtime":1704548077934,"results":"148","hashOfConfig":"82"},{"size":3074,"mtime":1704548077662,"results":"149","hashOfConfig":"82"},{"size":133,"mtime":1704516620895,"results":"150","hashOfConfig":"82"},{"size":2171,"mtime":1704550858965,"results":"151","hashOfConfig":"82"},{"size":5374,"mtime":1704548078265,"results":"152","hashOfConfig":"82"},{"size":5206,"mtime":1704548077572,"results":"153","hashOfConfig":"82"},{"size":9105,"mtime":1704548077604,"results":"154","hashOfConfig":"82"},{"size":10340,"mtime":1704548078657,"results":"155","hashOfConfig":"82"},{"size":2261,"mtime":1704548078950,"results":"156","hashOfConfig":"82"},{"size":406,"mtime":1704516620880,"results":"157","hashOfConfig":"82"},{"size":475,"mtime":1704516620877,"results":"158","hashOfConfig":"82"},{"size":15679,"mtime":1704548079020,"results":"159","hashOfConfig":"82"},{"size":6814,"mtime":1704548079993,"results":"160","hashOfConfig":"82"},{"size":3748,"mtime":1704447977517,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"1du73wa",{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"164"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"164"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"164"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"164"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"164"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"164"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"164"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"164"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"164"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"164"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"164"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"164"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"164"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"164"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"164"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"164"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"164"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"/Users/namle/Desktop/fe-bookingcare/src/index.js",[],["342","343"],"/Users/namle/Desktop/fe-bookingcare/src/serviceWorker.js",[],"/Users/namle/Desktop/fe-bookingcare/src/redux.js",[],"/Users/namle/Desktop/fe-bookingcare/src/hoc/IntlProviderWrapper.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/App.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/HomePage.js",[],"/Users/namle/Desktop/fe-bookingcare/src/hoc/authentication.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/actions/actionTypes.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/reducers/rootReducer.js",["344"],"import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport appReducer from \"./appReducer\";\nimport userReducer from \"./userReducer\";\nimport adminReducer from './adminReducer'\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nconst persistCommonConfig = {\n    storage: storage,\n    stateReconciler: autoMergeLevel2,\n};\n\nconst userPersistConfig = {\n    ...persistCommonConfig,\n    key: 'user',\n    whitelist: ['isLoggedIn', 'userInfo']\n};\nconst appPerPersistConfig = {\n    ...persistCommonConfig,\n    key: 'app',\n    whitelist: ['language']\n}\n\nexport default (history) => combineReducers({\n    router: connectRouter(history),\n    user: persistReducer(userPersistConfig, userReducer),\n    app: persistReducer(appPerPersistConfig, appReducer),\n    admin: adminReducer\n})","/Users/namle/Desktop/fe-bookingcare/src/routes/Home.js",[],"/Users/namle/Desktop/fe-bookingcare/src/routes/System.js",[],"/Users/namle/Desktop/fe-bookingcare/src/routes/Doctor.js",["345","346"],"import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport ManageSchedule from '../containers/System/Doctor/ManageSchedule';\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\nimport Header from '../containers/Header/Header';\nimport ManageHistory from '../containers/System/Doctor/ManageHistory';\nclass Doctor extends Component {\n    render() {\n\n\n        const { isLoggedIn } = this.props;\n        return (\n            <>\n                {this.props.isLoggedIn && <Header />}\n                <div className=\"system-container\">\n                    <div className=\"system-list\">\n                        <Switch>\n                            <Route path=\"/doctor/manage-schedule\" component={ManageSchedule} />\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient} />\n                            <Route path=\"/doctor/manage-patient-history\" component={ManageHistory} />\n                        </Switch>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        systemMenuPath: state.app.systemMenuPath,\n        isLoggedIn: state.user.isLoggedIn\n\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Auth/Login.js",[],"/Users/namle/Desktop/fe-bookingcare/src/components/CustomScrollbars.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/VerifyEmailBooking.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/ListingDoctor.js",["347","348"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router'\nimport { getAllDoctors } from '../../../services/userService'\nimport './ListingDoctor.scss'\nimport HeaderHomePage from '../../HomePage/HeaderHomePage';\nimport { FormattedMessage } from 'react-intl';\nimport * as actions from \"../../../store/actions\";\n\n\nclass ListingDoctor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataDoctor: []\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.topDoctorRedux !== this.props.topDoctorRedux) {\n            this.setState({\n                dataDoctor: this.props.topDoctorRedux\n            })\n        }\n    }\n    async componentDidMount() {\n        // let res = await getAllDoctors()\n        // if (res && res.errCode === 0) {\n        //     this.setState({\n        //         dataDoctor: res.data ? res.data : []\n        //     })\n        // }\n        this.props.fetchTopDoctor()\n    }\n    handleViewDetailDoctor = (item) => {\n        if (this.props.history) {\n            this.props.history.push(`/detail-doctor/${item.id}`)\n        }\n    }\n    render() {\n        let { dataDoctor } = this.state\n        let { language } = this.props\n        return (\n            <>\n                <HeaderHomePage />\n                <div className='listing-container-dr'>\n                    <div className='listing-content'>\n                        {dataDoctor && dataDoctor.length > 0 && dataDoctor.map((item, index) => {\n                            let imageBase64 = ''\n                            if (item.image) {\n                                imageBase64 = Buffer.from(item.image, 'base64').toString('binary')\n                            }\n                            return (\n                                <div className=\"card bg-light mb-3\" key={index}\n                                    onClick={() => { this.handleViewDetailDoctor(item) }}\n                                >\n                                    <div className=\"image-dr\"\n                                        style={{ backgroundImage: `url(${imageBase64})` }}\n                                    >\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title\" onClick={() => { this.handleViewDetailDoctor(item) }}><FormattedMessage id='headerhomepage.doctor' /></h5>\n                                        <p className=\"card-text\">{item.firstName} {item.lastName}</p>\n                                        <button className=\"btn btn-primary\"\n                                            onClick={() => { this.handleViewDetailDoctor(item) }}>\n                                            <FormattedMessage id='homepage.select' />\n                                        </button>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        topDoctorRedux: state.admin.dataDoctors\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchTopDoctor: () => dispatch(actions.fetchTopDoctor())\n\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ListingDoctor));\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Clinic/DetailClinic.js",["349"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport HeaderHomePage from '../../HomePage/HeaderHomePage';\nimport _ from 'lodash'\nimport {getDetailClinicById} from '../../../services/userService';\nimport DoctorSchedule from '../Doctor/DoctorSchedule'\nimport DoctorExtraInfo from '../Doctor/DoctorExtraInfo'\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\n\n\nclass DetailClinic extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arrDoctors: [],\n            dataDetailClinic: {},\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n\n    async componentDidMount() {\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id\n            let res = await getDetailClinicById({\n                id: id,\n            })\n            if (res && res.errCode === 0) {\n                let data = res.data\n                let arrDoctors = []\n                if (data && !_.isEmpty(data)) {\n                    let arr = data.doctorClinic\n                    if (arr && arr.length > 0) {\n                        arr.map(item => {\n                            arrDoctors.push(item.doctorId)\n                        })\n                    }\n                }\n                this.setState({\n                    arrDoctors: arrDoctors,\n                    dataDetailClinic: res.data\n                })\n            }\n        }\n    }\n\n    render() {\n        let {arrDoctors, dataDetailClinic} = this.state\n        return (\n            <>\n                <div className='detail-specialty-container'>\n                    <HeaderHomePage/>\n                    <div className='detail-specialty-body'>\n                        <div className='description-specialty'>\n                            {dataDetailClinic && !_.isEmpty(dataDetailClinic)\n                                && <div dangerouslySetInnerHTML={{__html: dataDetailClinic.descriptionHTML}}>\n                                </div>\n                            }\n                        </div>\n                        {arrDoctors && arrDoctors.length > 0 &&\n                            arrDoctors.map((item, index) => {\n                                return (\n                                    <div className='each-doctor' key={index}>\n                                        <div className='dt-content-left'>\n                                            <div className='profile-doctor'>\n                                                <ProfileDoctor\n                                                    doctorId={item}\n                                                    isShowDescriptionDoctor={true}\n                                                    isShowLinkDetail={true}\n                                                    isShowPrice={false}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div className='dt-content-right'>\n                                            <div className='doctor-schedule'>\n                                                <DoctorSchedule\n                                                    doctorIdFromParent={item}\n                                                />\n                                            </div>\n                                            <div className='doctor-extra-info'>\n                                                <DoctorExtraInfo\n                                                    doctorIdFromParent={item}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DetailDoctor.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Clinic/ListingClinic.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Handbook/ListingHandbook.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Handbook/DetailHandbook.js",["350"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport HeaderHomePage from '../../../containers/HomePage/HeaderHomePage'\nimport './DetailHandbook.scss'\nimport {getDetailHandbookById} from '../../../services/userService'\nimport _ from 'lodash';\n\n\nclass DetailHandbook extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            handbookData: {}\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n\n    async componentDidMount() {\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id\n            let res = await getDetailHandbookById(id)\n            if (res && res.errCode === 0) {\n                this.setState({\n                    handbookData: res.data\n                })\n            }\n        }\n    }\n\n    render() {\n        let {handbookData} = this.state\n        let {language} = this.props\n        return (\n            <>\n                <div className='detail-handbook-container'>\n                    <HeaderHomePage/>\n                    <div className='detail-handbook-body'>\n                        <div className='name-handbook'>\n                            <span>{handbookData.name}</span>\n                        </div>\n                    </div>\n                    <div className='markdown-handbook'>\n                        {handbookData && !_.isEmpty(handbookData)\n                            && <div dangerouslySetInnerHTML={{__html: handbookData.contentHTML}}>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHandbook);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageDetail.js",["351","352"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {getParkageById} from '../../../services/userService'\nimport HeaderHomePage from '../../HomePage/HeaderHomePage';\nimport 'react-markdown-editor-lite/lib/index.css';\nimport ParkageSchedule from './ParkageSchedule';\nimport ParkageExtraInfo from './ParkageExtraInfo';\n\nclass DetailParkage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            detailParkage: [],\n            parkageId: '',\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n\n    async componentDidMount() {\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id\n            this.setState({\n                parkageId: id\n            })\n            let res = await getParkageById(id)\n            if (res && res.errCode === 0) {\n                this.setState({\n                    detailParkage: res.data,\n                })\n            }\n        }\n    }\n\n    render() {\n        let {language} = this.props\n        let {detailParkage, parkageId} = this.state\n        return (\n            <>\n                <HeaderHomePage\n                    isShowBanner={false}\n                />\n                <div className='doctor-detail-container'>\n                    <div className='doctor-info'>\n                        <div className='content-left'\n                             style={{backgroundImage: `url(${detailParkage && detailParkage.image ? detailParkage.image : ''})`}}>\n                        </div>\n                        <div className='content-right'>\n                            <div className='up'>\n                                {detailParkage.name}\n                            </div>\n                            <div className='down'>\n                                {detailParkage && detailParkage.description &&\n                                    <span>{detailParkage.description}</span>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <div className='schedule-doctor'>\n                        <div className='content-left'>\n                            <ParkageSchedule\n                                doctorIdFromParent={this.state.parkageId}\n                            />\n                        </div>\n                        <div className='content-right'>\n                            <ParkageExtraInfo doctorIdFromParent={this.state.parkageId}/>\n                        </div>\n                    </div>\n                    <div className='detail-info-doctor'>\n                        {detailParkage && detailParkage.contentHTML &&\n                            <div dangerouslySetInnerHTML={{__html: detailParkage.contentHTML}}></div>\n                        }\n                    </div>\n                    <div className='comment-doctor'></div>\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailParkage);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/VerifyEmailBookingParkage.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ListingParkage.js",["353","354","355"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {\n    getAllParkage,\n    getParkageBySelectioncategoryId,\n    getParkageBySelectionClinicId,\n    getParkageBySelectionPriceId,\n    getParkageBySelectionProvinceId,\n    getSearchParkage\n} from '../../../services/userService'\nimport {withRouter} from 'react-router'\nimport HeaderHomePage from '../../HomePage/HeaderHomePage';\nimport './ListingParkage.scss'\nimport Select from 'react-select'\nimport * as actions from \"../../../store/actions\";\nimport {LANGUAGE} from '../../../utils/constant';\nimport ProfileParkage from './Modal/ProfileParkage';\nimport ParkageSchedule from './ParkageSchedule';\nimport ParkageExtraInfo from './ParkageExtraInfo';\n\nclass ListingParkage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataParkage: [],\n            listPrice: [],\n            listCategory: [],\n            listProvince: [],\n            listClinic: [],\n\n            selectedPrice: '',\n            selectedCategory: '',\n            selectedProvince: '',\n            selectedClinic: '',\n\n            isQuery: false,\n            SearchQ: '',\n            arrParkage: []\n\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        // if (prevState.selectedProvince !== this.state.selectedProvince) {\n        // let provinceId = this.state.selectedProvince.value\n        //     let res = await getParkageBySelection({ provinceId: provinceId, categoryId: categoryId, priceId: priceId, clinicId: clinicId })\n        //     if (res && res.errCode === 0) {\n        //         this.setState({\n        //             dataParkage: res.data\n        //         })\n        //     }\n        // }\n        if (prevState.selectedCategory !== this.state.selectedCategory) {\n            let categoryId = this.state.selectedCategory.value\n            let res = await getParkageBySelectioncategoryId({categoryId: categoryId})\n            if (res && res.errCode === 0) {\n                this.setState({\n                    dataParkage: res.data\n                })\n            }\n        }\n        if (prevState.selectedPrice !== this.state.selectedPrice) {\n            let priceId = this.state.selectedPrice.value\n            let res = await getParkageBySelectionPriceId({priceId: priceId})\n            if (res && res.errCode === 0) {\n                this.setState({\n                    dataParkage: res.data\n                })\n            }\n        }\n        if (prevState.selectedClinic !== this.state.selectedClinic) {\n            let clinicId = this.state.selectedClinic.value\n            let res = await getParkageBySelectionClinicId({clinicId: clinicId})\n            if (res && res.errCode === 0) {\n                this.setState({\n                    dataParkage: res.data\n                })\n            }\n        }\n        if (prevProps.allRequiredDoctorInfo !== this.props.allRequiredDoctorInfo) {\n            let {resCategory, resPrice, resProvince, resClinic} = this.props.allRequiredDoctorInfo\n            let dataSelectCategory = this.buildDataInputSelect(resCategory, 'CATEGORY')\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE')\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE')\n            let dataClinic = this.buildDataInputSelect(resClinic, 'CLINIC')\n            this.setState({\n                listPrice: dataSelectPrice,\n                listCategory: dataSelectCategory,\n                listProvince: dataSelectProvince,\n                listClinic: dataClinic,\n            })\n        }\n    }\n\n    async componentDidMount() {\n        let res = await getAllParkage()\n        if (res && res.errCode === 0) {\n            this.setState({\n                dataParkage: res.data ? res.data : []\n            })\n        }\n    }\n\n    buildDataInputSelect = (inputData, type) => {\n        let result = []\n        let language = this.props.language\n        if (inputData && inputData.length > 0) {\n            if (type === 'PRICE') {\n                inputData.map((item, index) => {\n                    let object = {};\n                    let labelVi = `${item.valueVi}`\n                    let labelEn = `${item.valueEn} USD`\n                    object.label = language === LANGUAGE.VI ? labelVi : labelEn\n                    object.value = item.keyMap\n                    result.push(object)\n                })\n            }\n            if (type === 'CATEGORY' || type === 'PROVINCE') {\n                inputData.map((item, index) => {\n                    let object = {};\n                    let labelVi = `${item.valueVi}`\n                    let labelEn = `${item.valueEn}`\n                    object.label = language === LANGUAGE.VI ? labelVi : labelEn\n                    object.value = item.keyMap\n                    result.push(object)\n                })\n            }\n            if (type === 'CLINIC') {\n                inputData.map((item, index) => {\n                    let object = {};\n                    object.label = item.name\n                    object.value = item.id\n                    result.push(object)\n                })\n            }\n        }\n        return result\n    }\n    getAllParkageListing = async () => {\n        let res = await getAllParkage()\n        if (res && res.errCode === 0) {\n            this.setState({\n                dataParkage: res.data ? res.data : []\n            })\n        }\n    }\n    handleViewDetailParkage = (item) => {\n        if (this.props.history) {\n            this.props.history.push(`/detail-parkage/${item.id}`)\n        }\n    }\n    handleOnchangeSelect = async (selectedOption, name) => {\n        let stateName = name.name\n        let stateCopy = {...this.state}\n        stateCopy[stateName] = selectedOption\n        this.setState({\n            ...stateCopy\n        }, async () => {\n            await this.handleChangefilter()\n        })\n    }\n    handleChangefilter = async () => {\n        let provinceId = this.state.selectedProvince.value\n        let res = await getParkageBySelectionProvinceId({provinceId: provinceId})\n        if (res && res.errCode === 0) {\n            this.setState({\n                dataParkage: res.data\n            })\n        }\n    }\n    handleSearch = async () => {\n        let res = await getSearchParkage(this.state.SearchQ)\n        if (res && res.errCode === 0) {\n            this.setState({\n                isQuery: true,\n                arrParkage: res.data,\n            })\n        }\n    }\n    handleChangeSearch = (event) => {\n        let queryS = event.target.value\n        this.setState({\n            SearchQ: queryS\n        })\n    }\n    handleKeyDown = (event) => {\n        if (event.key === 'Enter' || event.keyCode === 13) {\n            this.handleSearch()\n        }\n    }\n    handleClickSearch = () => {\n        this.handleSearch()\n    }\n    handleClear = () => {\n        this.setState({\n            selectedPrice: '',\n            selectedCategory: '',\n            selectedProvince: '',\n            selectedClinic: '',\n            isQuery: false,\n            SearchQ: ''\n        }, async () => {\n            await this.getAllParkageListing()\n        })\n    }\n\n    render() {\n        let {dataParkage, isQuery, arrParkage} = this.state\n        let {language} = this.props\n        // console.log('check this shit', this.state.selectedPrice.value);\n        return (\n            <>\n                <HeaderHomePage/>\n                <div className='parkage-header-container'>\n                    <div className='background-img'>\n                        <div className='parkage-title'>\n                            <span className='text-parkage'><FormattedMessage id='parkage.title'/></span>\n                        </div>\n                    </div>\n                    <div className='parkage-header-body'>\n                        <div className='parkage-up'>\n                            <div className='up-search'>\n                                <div className='left-s'>\n                                    <input\n                                        onChange={(event) => {\n                                            this.handleChangeSearch(event)\n                                        }}\n                                        onKeyDown={(event) => {\n                                            this.handleKeyDown(event)\n                                        }}\n                                        placeholder='Search'\n                                        value={this.state.SearchQ}\n                                    />\n                                    <span\n                                        onClick={() => {\n                                            this.handleClickSearch()\n                                        }}\n                                    >tim kiem</span>\n                                </div>\n                            </div>\n                            <div className='parkage-select'>\n                                <div className='select-form'>\n                                    <Select\n                                        value={this.state.selectedProvince}\n                                        onChange={this.handleOnchangeSelect}\n                                        options={this.state.listProvince}\n                                        placeholder={<FormattedMessage id='admin.manage-doctor.province'/>}\n                                        isSearchable={true}\n                                        isLoading={true}\n                                        name='selectedProvince'\n                                    />\n                                </div>\n                                <div className='select-form'>\n                                    <Select\n                                        value={this.state.selectedCategory}\n                                        onChange={this.handleOnchangeSelect}\n                                        options={this.state.listCategory}\n                                        placeholder={<FormattedMessage id='admin.manage-doctor.category'/>}\n                                        isSearchable={true}\n                                        isLoading={true}\n                                        name='selectedCategory'\n                                    />\n                                </div>\n                                <div className='select-form'>\n                                    <Select\n                                        value={this.state.selectedPrice}\n                                        onChange={this.handleOnchangeSelect}\n                                        options={this.state.listPrice}\n                                        placeholder={<FormattedMessage id='admin.manage-doctor.price'/>}\n                                        isSearchable={true}\n                                        isLoading={true}\n                                        name='selectedPrice'\n                                    />\n                                </div>\n                                <div className='select-form'>\n                                    <Select\n                                        value={this.state.selectedClinic}\n                                        onChange={this.handleOnchangeSelect}\n                                        options={this.state.listClinic}\n                                        placeholder={<FormattedMessage id='admin.manage-doctor.select-clinic'/>}\n                                        isSearchable={true}\n                                        isLoading={true}\n                                        name='selectedClinic'\n                                    />\n                                </div>\n                                <div className='reset-option'\n                                     onClick={() => {\n                                         this.handleClear()\n                                     }}\n                                >\n                                    <i className=\"fas fa-undo-alt\"></i>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {isQuery === false ?\n                    <>\n                        <div className='listing-container'>\n                            <div className='listing-content'>\n                                {dataParkage && dataParkage.length > 0 && dataParkage.map((item, index) => {\n                                    let imageBase64 = ''\n                                    if (item.image) {\n                                        imageBase64 = Buffer.from(item.image, 'base64').toString('binary')\n                                    }\n                                    return (\n                                        <>\n                                            <div className=\"card bg-light mb-3\" key={index}\n                                                 onClick={() => {\n                                                     this.handleViewDetailParkage(item)\n                                                 }}\n                                            >\n                                                <div className=\"image\" onClick={() => {\n                                                    this.handleViewDetailParkage(item)\n                                                }}\n                                                     style={{\n                                                         backgroundImage: `url(${imageBase64})`,\n                                                         width: ' 278px',\n                                                         height: '150px'\n                                                     }}\n                                                >\n                                                </div>\n                                                <div className=\"card-body\">\n                                                    <h5 className=\"card-title\" onClick={() => {\n                                                        this.handleViewDetailParkage(item)\n                                                    }}>{item.name}</h5>\n                                                    <div className='d-flex'>\n                                                        <div className='p-2 font-weight-bold'><FormattedMessage\n                                                            id='parkage.price'/>:\n                                                        </div>\n                                                        <div className='ml-auto p-2 font-weight-bold'>\n                                                            {language === LANGUAGE.VI ? item.priceIdData.valueVi : item.priceIdData.valueEn}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </>\n\n                                    )\n                                })}\n                            </div>\n                        </div>\n                    </>\n                    :\n                    <>\n                        {arrParkage && arrParkage.length > 0 &&\n                            arrParkage.map((item, index) => {\n                                return (\n                                    <div className='parkage-container-search'>\n                                        <div className='each-parkage' key={index}>\n                                            <div className='pk-content-left'>\n                                                <div className='profile-doctor'>\n                                                    <ProfileParkage\n                                                        parkageId={item.id}\n                                                        isShowDescriptionDoctor={true}\n                                                        isShowLinkDetail={true}\n                                                        isShowPrice={false}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className='dt-content-right'>\n                                                <div className='doctor-schedule'>\n                                                    <ParkageSchedule\n                                                        doctorIdFromParent={item.id}\n                                                    />\n                                                </div>\n                                                <div className='doctor-extra-info'>\n                                                    <ParkageExtraInfo\n                                                        doctorIdFromParent={item.id}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                )\n                            })\n                        }\n                    </>\n                }\n\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        allRequiredDoctorInfo: state.admin.allRequiredDoctorInfo\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllRequiredDoctorInfo: () => dispatch(actions.getAllRequiredDoctorInfo()),\n\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ListingParkage));\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Specialty/ListingSpecialty.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Specialty/DetailSpecialty.js",["356","357"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {LANGUAGE} from '../../../utils';\nimport HeaderHomePage from '../../../containers/HomePage/HeaderHomePage'\nimport './DetailSpecialty.scss'\nimport DoctorSchedule from '../Doctor/DoctorSchedule'\nimport DoctorExtraInfo from '../Doctor/DoctorExtraInfo'\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\nimport {getallcodeServive, getAllDetailSpecialtyById} from '../../../services/userService'\nimport _ from 'lodash';\n\n\nclass DetailSpecialty extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arrDoctors: [],\n            dataDetailSpecialty: {},\n            listProvince: []\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n\n    async componentDidMount() {\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id\n            let res = await getAllDetailSpecialtyById({\n                id: id,\n                location: 'ALL'\n            })\n            let resProvince = await getallcodeServive(\"PROVINCE\")\n            if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0) {\n                let data = res.data\n                let arrDoctors = []\n                if (data && !_.isEmpty(data)) {\n                    let arr = data.doctorSpecialty\n                    if (arr && arr.length > 0) {\n                        arr.map(item => {\n                            arrDoctors.push(item.doctorId)\n                        })\n                    }\n                }\n                let dataProvince = resProvince.data\n                if (dataProvince && dataProvince.length > 0) {\n                    dataProvince.unshift({\n                        createAt: null,\n                        keyMap: 'ALL',\n                        type: \"PROVINCE\",\n                        valueVi: \"Toàn Quốc\",\n                        valueEn: \"ALL\"\n                    })\n                }\n                this.setState({\n                    arrDoctors: arrDoctors,\n                    listProvince: dataProvince ? dataProvince : [],\n                    dataDetailSpecialty: res.data\n                })\n            }\n        }\n    }\n\n    handleOnchangeSelect = async (event) => {\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\n            let id = this.props.match.params.id\n            let location = event.target.value\n            let res = await getAllDetailSpecialtyById({\n                id: id,\n                location: location\n            })\n            if (res && res.errCode === 0) {\n                let data = res.data\n                let arrDoctors = []\n                if (data && !_.isEmpty(data)) {\n                    let arr = data.doctorSpecialty\n                    if (arr && arr.length > 0) {\n                        arr.map(item => {\n                            arrDoctors.push(item.doctorId)\n                        })\n                    }\n                }\n                this.setState({\n                    arrDoctors: arrDoctors,\n                    dataDetailSpecialty: res.data\n                })\n            }\n        }\n    }\n\n    render() {\n        let {arrDoctors, listProvince, dataDetailSpecialty} = this.state\n        let {language} = this.props\n        return (\n            <>\n                <div className='detail-specialty-container'>\n                    <HeaderHomePage/>\n                    <div className='detail-specialty-body'>\n                        <div className='description-specialty'>\n                            {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty)\n                                && <div dangerouslySetInnerHTML={{__html: dataDetailSpecialty.descriptionHTML}}>\n                                </div>\n                            }\n                        </div>\n                        <div className='search-sp-doctor'>\n                            <select onChange={(event) => {\n                                this.handleOnchangeSelect(event)\n                            }}>\n                                {\n                                    listProvince && listProvince.length > 0 &&\n                                    listProvince.map((item, index) => {\n                                        return (\n                                            <option key={index} value={item.keyMap}>\n                                                {language === LANGUAGE.VI ? item.valueVi : item.valueEn}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        {arrDoctors && arrDoctors.length > 0 &&\n                            arrDoctors.map((item, index) => {\n                                return (\n                                    <div className='each-doctor' key={index}>\n                                        <div className='dt-content-left'>\n                                            <div className='profile-doctor'>\n                                                <ProfileDoctor\n                                                    doctorId={item}\n                                                    isShowDescriptionDoctor={true}\n                                                    isShowLinkDetail={true}\n                                                    isShowPrice={false}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div className='dt-content-right'>\n                                            <div className='doctor-schedule'>\n                                                <DoctorSchedule\n                                                    doctorIdFromParent={item}\n                                                />\n                                            </div>\n                                            <div className='doctor-extra-info'>\n                                                <DoctorExtraInfo\n                                                    doctorIdFromParent={item}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n\n                    </div>\n                </div>\n            </>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/HeaderHomePage.js",["358","359","360"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './HeaderHomePage.scss';\nimport {FormattedMessage} from 'react-intl';\nimport {LANGUAGE} from '../../utils';\nimport * as actions from '../../store/actions';\nimport {changeLanguageApp} from '../../store/actions';\nimport {withRouter} from 'react-router';\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle} from 'reactstrap';\nimport Select from 'react-select'\nclass HeaderHomePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropdownOpen: false,\n            listClinic: [],\n            listSpecialty: [],\n            listDoctors: [],\n            selectedOption: '',\n        }\n    }\n\n    componentDidMount() {\n        this.props.getAllRequiredDoctorInfo()\n        this.props.fetchAllDoctor()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.allDoctors !== this.props.allDoctors) {\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\n            this.setState({\n                listDoctors: dataSelect\n            })\n        }\n        if (prevProps.allRequiredDoctorInfo !== this.props.allRequiredDoctorInfo) {\n            let {resSpecialty, resClinic} = this.props.allRequiredDoctorInfo\n            let dataSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY')\n            let dataClinic = this.buildDataInputSelect(resClinic, 'CLINIC')\n            this.setState({\n                listSpecialty: dataSpecialty,\n                listClinic: dataClinic\n            })\n        }\n    }\n\n    buildDataInputSelect = (inputData, type) => {\n        let result = []\n        let language = this.props.language\n        if (inputData && inputData.length > 0) {\n            if (type === 'USERS') {\n                inputData.map((item) => {\n                    let object = {};\n                    let labelVi = `${item.firstName} ${item.lastName}`\n                    let labelEn = `${item.lastName} ${item.firstName}`\n                    object.label = language === LANGUAGE.VI ? labelVi : labelEn\n                    object.value = item.id\n                    object.type = 'USERS'\n                    object.image = item.image\n                    result.push(object)\n                })\n            }\n            if (type === 'SPECIALTY') {\n                inputData.map((item) => {\n                    let object = {};\n                    object.label = item.name\n                    object.value = item.id\n                    object.image = item.image\n                    object.type = 'SPECIALTY'\n                    result.push(object)\n                })\n            }\n            if (type === 'CLINIC') {\n                inputData.map((item) => {\n                    let object = {};\n                    object.label = item.name\n                    object.value = item.id\n                    object.image = item.image\n                    object.type = 'CLINIC'\n                    result.push(object)\n                })\n            }\n\n        }\n        return result\n    }\n    changLanguage = (language) => {\n        this.props.changeLanguageAppRedux(language)\n    }\n    returnToHome = () => {\n        if (this.props.history) {\n            this.props.history.push(`/home`)\n        }\n    }\n    directToSpecialty = () => {\n        if (this.props.history) {\n            this.props.history.push(`/listing-specialty`)\n        }\n    }\n    directToClinic = () => {\n        if (this.props.history) {\n            this.props.history.push(`/listing-clinic`)\n        }\n    }\n    directToDoctor = () => {\n        if (this.props.history) {\n            this.props.history.push(`/listing-doctor`)\n        }\n    }\n    directToParkage = () => {\n        if (this.props.history) {\n            this.props.history.push(`/listing-parkage`)\n        }\n    }\n    handleViewDetailSpecialty = () => {\n        if (this.props.history) {\n            this.props.history.push(`/detail-specialty/5`)\n        }\n    }\n    handleViewDetailSpecialty2 = () => {\n        if (this.props.history) {\n            this.props.history.push(`/detail-specialty/6`)\n        }\n    }\n    toggle = () => {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen\n        })\n    }\n\n    handleChange = (selectedOption) => {\n        if (selectedOption.type === 'SPECIALTY') {\n            this.props.history.push(`/detail-specialty/${selectedOption.value}`)\n        }\n        if (selectedOption.type === 'CLINIC') {\n            this.props.history.push(`/detail-clinic/${selectedOption.value}`)\n        }\n        if (selectedOption.type === 'USERS') {\n            this.props.history.push(`/detail-doctor/${selectedOption.value}`)\n        }\n    }\n\n    render() {\n        let language = this.props.language\n        let {dropdownOpen, selectedOption, listSpecialty, listClinic, listDoctors} = this.state\n        const groupedOptions = [\n            {\n                label: <FormattedMessage id='headerhomepage.speciality'/>,\n                options: listSpecialty,\n            },\n            {\n                label: <FormattedMessage id='headerhomepage.health-facility'/>,\n                options: listClinic\n            },\n            {\n                label: <FormattedMessage id='headerhomepage.doctor'/>,\n                options: listDoctors\n            }\n        ];\n        return (\n            <>\n                <div className='Header-Container'>\n                    <div className='Header-Content'>\n                        <div className='Left-Content'>\n                            <div className=\"d-flex\">\n                                <div className='dropdown'>\n                                    <Dropdown isOpen={dropdownOpen} toggle={this.toggle}>\n                                        <DropdownToggle>\n                                            <button><i className=\"fas fa-bars\"></i></button>\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            <DropdownItem header>Menu</DropdownItem>\n                                            <DropdownItem onClick={() => {\n                                                this.directToSpecialty()\n                                            }}><FormattedMessage id='headerhomepage.speciality'/></DropdownItem>\n                                            <DropdownItem onClick={() => {\n                                                this.directToClinic()\n                                            }}><FormattedMessage id='headerhomepage.health-facility'/></DropdownItem>\n                                            <DropdownItem onClick={() => {\n                                                this.directToDoctor()\n                                            }}><FormattedMessage id='headerhomepage.doctor'/></DropdownItem>\n                                            <DropdownItem onClick={() => {\n                                                this.directToParkage()\n                                            }}><FormattedMessage id='headerhomepage.fee'/></DropdownItem>\n                                        </DropdownMenu>\n                                    </Dropdown>\n                                </div>\n                            </div>\n                            <div className='Header-Logo' onClick={() => {\n                                this.returnToHome()\n                            }}>\n                            </div>\n                        </div>\n                        <div className='Center-Content'>\n                            <div className='Child-Content' onClick={() => {\n                                this.directToSpecialty()\n                            }}>\n                                <div><b><FormattedMessage id='headerhomepage.speciality'/></b></div>\n                                <div className='sub-title'><FormattedMessage id='headerhomepage.searchdoctor'/></div>\n                            </div>\n                            <div className='Child-Content' onClick={() => {\n                                this.directToClinic()\n                            }}>\n                                <div><b><FormattedMessage id='headerhomepage.health-facility'/></b></div>\n                                <div className='sub-title'>< FormattedMessage id='headerhomepage.select-room'/></div>\n                            </div>\n                            <div className='Child-Content' onClick={() => {\n                                this.directToDoctor()\n                            }}>\n                                <div><b><FormattedMessage id='headerhomepage.doctor'/></b></div>\n                                <div className='sub-title'><FormattedMessage id='headerhomepage.select-doctor'/></div>\n                            </div>\n                            <div className='Child-Content' onClick={() => {\n                                this.directToParkage()\n                            }}>\n                                <div><b><FormattedMessage id='headerhomepage.fee'/></b></div>\n                                <div className='sub-title'><FormattedMessage id='headerhomepage.health-check'/></div>\n                            </div>\n                        </div>\n                        <div className='Right-Content'>\n                            <div className='support'><i className=\"fas fa-question\"></i><FormattedMessage\n                                id='headerhomepage.support'/></div>\n                            <div className={language === LANGUAGE.VI ? 'language-vi active' : 'language-vi'}><span\n                                onClick={() => {\n                                    this.changLanguage(LANGUAGE.VI)\n                                }}>VN</span></div>\n                            <div className={language === LANGUAGE.EN ? 'language-en active' : 'language-en'}><span\n                                onClick={() => {\n                                    this.changLanguage(LANGUAGE.EN)\n                                }}>EN</span></div>\n                        </div>\n                    </div>\n                </div>\n                {\n                    this.props.isShowBanner === true &&\n                    <div className='home-banner'>\n                        <div className='content-up'>\n                            <div className='title-banner1'><FormattedMessage id='banner.title1'/></div>\n                            <div className='title-banner2'><FormattedMessage id='banner.title2'/></div>\n                            <div className='search'>\n                                <i className=\"fas fa-search\"></i>\n                                <Select\n                                    value={selectedOption}\n                                    onChange={this.handleChange}\n                                    options={groupedOptions}\n                                    placeholder={'Search'}\n                                    isSearchable={true}\n                                    isLoading={true}\n                                />\n                            </div>\n                        </div>\n                        <div className='content-down'>\n                            <div className='option'>\n                                <div className='option-child' onClick={() => {\n                                    this.directToSpecialty()\n                                }}>\n                                    <div className='icon-child'><i className=\"far fa-hospital\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon1'/></div>\n                                </div>\n                                <div className='option-child' onClick={() => {\n                                    this.directToClinic()\n                                }}>\n                                    <div className='icon-child'><i className=\"fas fa-mobile\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon2'/></div>\n                                </div>\n                                <div className='option-child' onClick={() => {\n                                    this.directToClinic()\n                                }}>\n                                    <div className='icon-child'><i className=\"fas fa-user-md\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon3'/></div>\n                                </div>\n                                <div className='option-child' onClick={() => {\n                                    this.directToClinic()\n                                }}>\n                                    <div className='icon-child'><i className=\"fas fa-stethoscope\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon4'/></div>\n                                </div>\n                                <div className='option-child' onClick={() => {\n                                    this.handleViewDetailSpecialty()\n                                }}>\n                                    <div className='icon-child'><i className=\"fas fa-medkit\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon5'/></div>\n                                </div>\n                                <div className='option-child'>\n                                    <div className='icon-child' onClick={() => {\n                                        this.handleViewDetailSpecialty2()\n                                    }}><i className=\"fas fa-user-md\"></i></div>\n                                    <div className='text-child'><FormattedMessage id='banner.icon6'/></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        userInfo: state.user.userInfo,\n        allRequiredDoctorInfo: state.admin.allRequiredDoctorInfo,\n        allDoctors: state.admin.allDoctors,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeLanguageAppRedux: (languageData) => dispatch(changeLanguageApp(languageData)),\n        getAllRequiredDoctorInfo: () => dispatch(actions.getAllRequiredDoctorInfo()),\n        fetchAllDoctor: () => dispatch(actions.fetchAllDoctor()),\n\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HeaderHomePage));\n","/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/FooterHomePage.js",["361"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n\nclass HomeFooter extends Component {\n\n    render() {\n        return (\n            <div className='home-footer'>\n                <p>&copy; 2023 Co so du lieu web <a target='_blank' href='https://www.facebook.com/letuandan123'>Go to\n                    my infor</a></p>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\n","/Users/namle/Desktop/fe-bookingcare/src/services/userService.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Medical-Facility.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Specialty.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/about.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Handbook.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/HomePage/Section/Outstainding-doctor.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/index.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/reducers/appReducer.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/reducers/adminReducer.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/reducers/userReducer.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/ProfileDoctor.js",["362"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../../store/actions\";\nimport { LANGUAGE } from '../../../utils';\nimport { getProfileDoctorById } from '../../../services/userService'\nimport NumberFormat from 'react-number-format';\nimport './ProfileDoctor.scss'\nimport _ from 'lodash'\nimport moment from 'moment';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom'\n\n\nclass ProfileDoctor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataProfile: {}\n        }\n    }\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        // if (this.props.doctorId !== prevProps.doctorId) {\n        //     let data = await this.getProfileDoctorById(this.props.doctorId);\n        //     this.setState({\n        //         dataProfile: data,\n        //     });\n        // }\n    }\n    async componentDidMount() {\n        let data = await this.getInfoDoctor(this.props.doctorId)\n        this.setState({\n            dataProfile: data\n        })\n    }\n    getInfoDoctor = async (id) => {\n        let result = {}\n        if (id) {\n            let res = await getProfileDoctorById(id)\n            if (res && res.errCode === 0) {\n                result = res.data\n            }\n        }\n        return result\n    }\n    renderTimeBooking = (dataTime) => {\n        let { language } = this.props\n        if (dataTime && !_.isEmpty(dataTime)) {\n            let time = language === LANGUAGE.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn\n            let date = language === LANGUAGE.VI ?\n                moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\n                :\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd - MM/DD/YYYY')\n            return (\n                <>\n                    <div>{time} - {date}</div>\n                    <div><FormattedMessage id='patient.doctor-detail.book-free' /></div>\n                </>\n            )\n\n        } return <></>\n    }\n    render() {\n        let { dataProfile } = this.state\n        let { language, isShowDescriptionDoctor, dataTime, isShowPrice, isShowLinkDetail, doctorId } = this.props\n        let nameVi = '', nameEn = ''\n        if (dataProfile && dataProfile.positionData) {\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.firstName} ${dataProfile.lastName}`\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.lastName} ${dataProfile.firstName}`\n        }\n        return (\n            <div className='profile-doctor-container'>\n                <div className='intro-doctor'>\n                    <div className='content-left'\n                        style={{ backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})` }}\n                    >\n                    </div>\n                    <div className='content-right'>\n                        <div className='up'>\n                            {language === LANGUAGE.VI ? nameVi : nameEn}\n                        </div>\n                        <div className='down'>\n                            {isShowDescriptionDoctor === true ?\n                                <>\n                                    {dataProfile && dataProfile.Markdown && dataProfile.Markdown.description &&\n                                        <span>{dataProfile.Markdown.description}</span>\n                                    }\n                                </>\n                                :\n                                <>\n                                    {this.renderTimeBooking(dataTime)}\n                                </>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n                {isShowLinkDetail === true &&\n                    <div className='view-detail-doctor'>\n                        <Link to={`/detail-doctor/${doctorId}`}>\n                            <button className='btn btn-outline-secondary'>Xem thêm</button>\n                        </Link>\n                    </div>\n                }\n                {isShowPrice === true &&\n                    <div className='price'>\n                        <FormattedMessage id='patient.extra-info-doctor.price' />\n                        <span> : </span>\n                        {dataProfile && dataProfile.Doctor_Info && language === LANGUAGE.VI &&\n                            < NumberFormat\n                                className='currency'\n                                value={dataProfile.Doctor_Info.priceIdTypeData.valueVi}\n                                displayType='text'\n                                thousandSeparator={true}\n                                suffix='VND'\n                            />\n                        }\n                        {dataProfile && dataProfile.Doctor_Info && language === LANGUAGE.EN &&\n                            < NumberFormat\n                                className='currency'\n                                value={dataProfile.Doctor_Info.priceIdTypeData.valueEn}\n                                displayType='text'\n                                thousandSeparator={true}\n                                suffix='USD'\n                            />\n                        }\n                    </div>\n                }\n            </div>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DoctorExtraInfo.js",["363"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../../store/actions\";\nimport { LANGUAGE } from '../../../utils';\nimport './DoctorExtraInfo.scss';\nimport NumberFormat from 'react-number-format';\nimport { getExtraInfoDoctorById } from '../../../services/userService'\nimport { FormattedMessage } from 'react-intl';\n\nclass DoctorExtraInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isShowDetailInfo: false,\n            extraInfo: {}\n        }\n    }\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.doctorIdFromParent !== this.props.doctorIdFromParent) {\n            let res = await getExtraInfoDoctorById(this.props.doctorIdFromParent)\n            if (res && res.errCode === 0) {\n                this.setState({\n                    extraInfo: res.data\n                })\n            }\n        }\n    }\n    async componentDidMount() {\n        if (this.props.doctorIdFromParent) {\n            let res = await getExtraInfoDoctorById(this.props.doctorIdFromParent)\n            if (res && res.errCode === 0) {\n                this.setState({\n                    extraInfo: res.data\n                })\n            }\n        }\n    }\n    handleShowHideInfo = (status) => {\n        this.setState({\n            isShowDetailInfo: status\n        })\n    }\n    render() {\n        let { isShowDetailInfo, extraInfo } = this.state\n        let { language } = this.props\n        return (\n            <div className='doctor-extra-info-container'>\n                <div className='content-up'>\n                    <div className='text-address'>\n                        <FormattedMessage id='patient.extra-info-doctor.text-address' />\n                    </div>\n                    <div className='name-clinic'>\n                        {extraInfo && extraInfo.nameClinic ? extraInfo.nameClinic : ''}\n                    </div>\n                    <div className='detail-address'>\n                        {extraInfo && extraInfo.addressClinic ? extraInfo.addressClinic : ''}\n                    </div>\n                </div>\n                <div className='content-down'>\n                    {isShowDetailInfo === false &&\n                        <div className='short-info'>\n                            <FormattedMessage id='patient.extra-info-doctor.price' />\n                            {extraInfo && extraInfo.priceIdTypeData && language === LANGUAGE.VI &&\n                                < NumberFormat\n                                    className='currency'\n                                    value={extraInfo.priceIdTypeData.valueVi}\n                                    displayType='text'\n                                    thousandSeparator={true}\n                                    suffix='VND'\n                                />\n                            }\n                            {extraInfo && extraInfo.priceIdTypeData && language === LANGUAGE.EN &&\n                                < NumberFormat\n                                    className='currency'\n                                    value={extraInfo.priceIdTypeData.valueEn}\n                                    displayType='text'\n                                    thousandSeparator={true}\n                                    suffix='USD'\n                                />\n                            }\n                            <span onClick={() => { this.handleShowHideInfo(true) }}><FormattedMessage id='patient.extra-info-doctor.see-more' /></span>\n                        </div>\n                    }\n                    {isShowDetailInfo === true &&\n                        <>\n                            <div className='title-price'><FormattedMessage id='patient.extra-info-doctor.price' /></div>\n                            <div className='detail-info'>\n                                <div className='price'>\n                                    <span className='left'><FormattedMessage id='patient.extra-info-doctor.price' /></span>\n                                    <span className='right'>\n                                        {extraInfo && extraInfo.priceIdTypeData && language === LANGUAGE.VI &&\n                                            < NumberFormat\n                                                className='currency'\n                                                value={extraInfo.priceIdTypeData.valueVi}\n                                                displayType='text'\n                                                thousandSeparator={true}\n                                                suffix='VND'\n                                            />\n                                        }\n                                        {extraInfo && extraInfo.priceIdTypeData && language === LANGUAGE.EN &&\n                                            < NumberFormat\n                                                className='currency'\n                                                value={extraInfo.priceIdTypeData.valueEn}\n                                                displayType='text'\n                                                thousandSeparator={true}\n                                                suffix='USD'\n                                            />\n                                        }\n                                    </span>\n                                </div>\n                                <div className='note'>\n                                    {extraInfo && extraInfo.note ? extraInfo.note : ''}\n                                </div>\n                            </div>\n                            <div className='payment'>\n                                <FormattedMessage id='patient.extra-info-doctor.payment' />\n\n                                {extraInfo && extraInfo.paymentIdTypeData && language === LANGUAGE.VI ? extraInfo.paymentIdTypeData.valueVi : ''}\n                                {extraInfo && extraInfo.paymentIdTypeData && language === LANGUAGE.EN ? extraInfo.paymentIdTypeData.valueEn : ''}\n\n\n                            </div>\n                            <div className='hide-price'>\n                                <span onClick={() => { this.handleShowHideInfo(false) }}><FormattedMessage id='patient.extra-info-doctor.hide' /></span>\n                            </div>\n                        </>\n\n                    }\n                </div>\n\n            </div>\n\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfo);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/DoctorSchedule.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageExtraInfo.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/ParkageSchedule.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/constant.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Header/Header.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/UserManage.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Specialty/ManageSpecialty.js",["364"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/UserRedux.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Clinic/ManageClinic.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManageSchedule.js",["365","366"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Handbook/ManageHandbook.js",["367"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Parkage/ManageParkage.js",["368","369","370","371","372","373","374"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/ManagePatientAdmin.js",["375","376","377","378"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Parkage/ManagePatientForParkage.js",["379","380","381","382"],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManagePatient.js",["383"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport DatePicker from '../../../components/Input/DatePicker';\nimport './ManagePatient.scss'\nimport {getAllPatientForDoctor, postSendremedy} from '../../../services/userService'\nimport moment from 'moment';\nimport {toast} from 'react-toastify';\nimport LoadingOverlay from 'react-loading-overlay';\nimport RemedyModal from './RemedyModal';\n\nclass ManagePatient extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentDate: moment(new Date()).startOf('day').valueOf(),\n            dataPatient: [],\n            isOpenRemedyModal: false,\n            dataModal: {},\n            isShowLoading: false\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n    componentDidMount() {\n        this.getDataPatient()\n    }\n    getDataPatient = async () => {\n        let { userInfo } = this.props\n        let { currentDate } = this.state\n        let formatDate = new Date(currentDate).getTime()\n        let res = await getAllPatientForDoctor({\n            doctorId: userInfo.id,\n            date: formatDate\n        })\n        if (res && res.errCode === 0) {\n            this.setState({\n                dataPatient: res.data\n            })\n        }\n    }\n    handleOnchangeDatePicker = (date) => {\n        this.setState({\n            currentDate: date[0]\n        }, async () => {\n            await this.getDataPatient()\n        })\n    }\n    handleBtnConfirm = (item) => {\n        let data = {\n            doctorId: item.doctorId,\n            patientId: item.patientId,\n            timeType: item.timeType,\n            email: item.patientData.email,\n            patientName: item.patientData.firstName\n        }\n        this.setState({\n            isOpenRemedyModal: true,\n            dataModal: data\n        })\n    }\n    closeRemedyModal = () => {\n        this.setState({\n            isOpenRemedyModal: false,\n            dataModal: {}\n        })\n    }\n    sendRemedy = async (dataChild) => {\n        let { dataModal } = this.state\n        this.setState({\n            isShowLoading: true\n        })\n        let res = await postSendremedy({\n            email: dataChild.email,\n            imgBase64: dataChild.imgBase64,\n            doctorId: dataModal.doctorId,\n            patientId: dataModal.patientId,\n            timeType: dataModal.timeType,\n            patientName: dataModal.patientName,\n            language: this.props.language,\n        })\n        if (res && res.errCode === 0) {\n            this.setState({\n                isShowLoading: false\n            })\n            toast.success('Send Remedy Success')\n            this.closeRemedyModal()\n            await this.getDataPatient()\n        } else {\n            this.setState({\n                isShowLoading: false\n            })\n            toast.error('Something Wrong')\n        }\n    }\n    render() {\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state\n        let { language } = this.props\n        console.log('check', dataPatient);\n        return (\n            <>\n                <LoadingOverlay\n                    active={this.state.isShowLoading}\n                    spinner\n                    text='Loading'\n                >\n                    <div className='manage-patient-container'>\n                        <div className='m-p-title'>\n                            Quản Lý bệnh nhân khám bệnh\n                        </div>\n                        <div className='manage-patient-body row'>\n                            <div className='col-4 form-group'>\n                                <label>Chọn ngày khám</label>\n                                <DatePicker\n                                    className='form-control'\n                                    value={this.state.currentDate}\n                                    onChange={this.handleOnchangeDatePicker}\n                                />\n                            </div>\n                            <div className='col-12 table-manage-patient'>\n                                <table style={{ width: '100%' }}>\n                                    <tbody>\n                                        <tr>\n                                            <th>STT</th>\n                                            <th>Thời Gian</th>\n                                            <th>Họ và Tên</th>\n                                            <th>Địa chỉ</th>\n                                            <th>Giới Tính</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                        {dataPatient && dataPatient.length > 0 ? dataPatient.map((item, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    <td>{index + 1}</td>\n                                                    <td>{item.timeTypeDataPatient.valueVi}</td>\n                                                    <td>{item.patientData.firstName}</td>\n                                                    <td>{item.patientData.address}</td>\n                                                    <td>{item.patientData.genderData.valueVi}</td>\n                                                    <td>\n                                                        <button className='mp-btn-confirm'\n                                                            onClick={() => { this.handleBtnConfirm(item) }}\n                                                        >\n                                                            Xác nhận\n                                                        </button>\n                                                    </td>\n                                                </tr>\n                                            )\n                                        }) :\n                                            <tr>\n                                                <td colSpan='6' style={{ textAlign: 'center' }}>Không có bệnh nhân đặt</td>\n                                            </tr>\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                    <RemedyModal\n                        isOpenModal={isOpenRemedyModal}\n                        dataModal={dataModal}\n                        closeRemedyModal={this.closeRemedyModal}\n                        sendRemedy={this.sendRemedy}\n                    />\n                </LoadingOverlay>\n            </>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        userInfo: state.user.userInfo\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatient);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/ManageDoctor.js",["384","385","386","387","388","389","390","391"],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/Modal/ProfileParkage.js",["392","393"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../../../store/actions\";\nimport { LANGUAGE } from '../../../../utils';\nimport { getParkageById } from '../../../../services/userService'\nimport NumberFormat from 'react-number-format';\nimport _ from 'lodash'\nimport moment from 'moment';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom'\n\n\nclass ProfileParkage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataProfile: {}\n        }\n    }\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.parkageId !== prevProps.parkageId) {\n            let id = this.props.parkageId\n            let res = await getParkageById(id)\n            this.setState({\n                dataProfile: res.data\n            })\n        }\n    }\n    async componentDidMount() {\n        let res = await getParkageById(this.props.parkageId)\n        this.setState({\n            dataProfile: res.data\n        })\n    }\n    // getInfoParkage = async (id) => {\n    //     let result = {}\n    //     if (id) {\n    //         let res = await getParkageById(id)\n    //         if (res && res.errCode === 0) {\n    //             result = res.data\n    //         }\n    //     }\n    //     return result\n    // }\n    renderTimeBooking = (dataTime) => {\n        let { language } = this.props\n        if (dataTime && !_.isEmpty(dataTime)) {\n            let time = language === LANGUAGE.VI ? dataTime.valueVi : dataTime.valueEn\n            return (\n                <>\n                    <div>{time}</div>\n                    <div><FormattedMessage id='patient.doctor-detail.book-free' /></div>\n                </>\n            )\n\n        } return <></>\n    }\n    render() {\n        let { dataProfile } = this.state\n        console.log('check dataprofile', dataProfile);\n        let { language, isShowDescriptionDoctor, dataTime, isShowPrice, isShowLinkDetail } = this.props\n        return (\n            <div className='profile-doctor-container'>\n                <div className='intro-doctor'>\n                    <div className='content-left'\n                        style={{ backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})` }}\n                    >\n                    </div>\n                    <div className='content-right'>\n                        <div className='up'>\n                            {dataProfile.name}\n                        </div>\n                        <div className='down'>\n                            {isShowDescriptionDoctor === true ?\n                                <>\n                                    {dataProfile && dataProfile.description &&\n                                        <span>{dataProfile.description}</span>\n                                    }\n                                </>\n                                :\n                                <>\n                                    {this.renderTimeBooking(dataTime)}\n                                </>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n                {isShowLinkDetail === true &&\n                    <div className='view-detail-doctor'>\n                        <Link to={`/detail-parkage/${dataProfile.id}`}>\n                            <button className='btn btn-outline-secondary'>Xem thêm</button>\n                        </Link>\n                    </div>\n                }\n                {isShowPrice === true &&\n                    <div className='price'>\n                        <FormattedMessage id='patient.extra-info-doctor.price' />\n                        <span> : </span>\n                        {dataProfile && dataProfile.priceIdData && language === LANGUAGE.VI &&\n                            < NumberFormat\n                                className='currency'\n                                value={dataProfile.priceIdData.valueVi}\n                                displayType='text'\n                                thousandSeparator={true}\n                                suffix='VND'\n                            />\n                        }\n                        {dataProfile && dataProfile.priceIdData && language === LANGUAGE.EN &&\n                            < NumberFormat\n                                className='currency'\n                                value={dataProfile.priceIdData.valueEn}\n                                displayType='text'\n                                thousandSeparator={true}\n                                suffix='USD'\n                            />\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileParkage);\n","/Users/namle/Desktop/fe-bookingcare/src/store/actions/index.js",[],"/Users/namle/Desktop/fe-bookingcare/src/axios.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/ToastUtil.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/LanguageUtils.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/KeyCodeUtils.js",[],"/Users/namle/Desktop/fe-bookingcare/src/utils/CommonUtils.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Parkage/Modal/BookingModalParkage.js",["394","395"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from \"../../../../store/actions\";\nimport {LANGUAGE} from '../../../../utils';\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap'\nimport ProfileParkage from './ProfileParkage';\nimport _ from 'lodash'\nimport DatePicker from '../../../../components/Input/DatePicker';\nimport Select from 'react-select'\nimport {toast} from 'react-toastify'\nimport {postPatientBookAppointmentParkage} from '../../../../services/userService'\nimport {FormattedMessage} from 'react-intl';\nimport moment from 'moment';\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass BookingModalParkage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataProfile: {},\n            fullName: '',\n            address: '',\n            phoneNumber: '',\n            email: '',\n            genders: '',\n            selectedGender: '',\n            reason: '',\n            birthday: '',\n            parkageId: '',\n            timeType: '',\n            isShowLoading: false,\n            date: '',\n        }\n    }\n\n    componentDidMount() {\n        this.props.FetchGenderStart()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.genders !== this.props.genders) {\n            this.setState({\n                genders: this.buildDataGender(this.props.genders)\n            })\n        }\n        if (prevProps.language !== this.props.language) {\n            this.setState({\n                genders: this.buildDataGender(this.props.genders)\n            })\n        }\n        if (prevProps.dataTime !== this.props.dataTime) {\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\n                let timeType = this.props.dataTime.keyMap\n                this.setState({\n                    timeType: timeType\n                })\n            }\n        }\n        if (prevProps.parkageId !== this.props.parkageId) {\n            let parkageId = this.props.parkageId\n            this.setState({\n                parkageId: parkageId,\n            })\n        }\n        if (prevProps.date !== this.props.date) {\n            let date = this.props.date\n            this.setState({\n                date: date\n            })\n        }\n    }\n\n    buildDataGender = (data) => {\n        let result = []\n        let {language} = this.props\n        if (data && data.length > 0) {\n            data.map(item => {\n                let object = {}\n                object.label = language === LANGUAGE.VI ? item.valueVi : item.valueEn\n                object.value = item.keyMap\n                result.push(object)\n            })\n        }\n        return result\n    }\n    handleOnchangeInput = (event, id) => {\n        let copyState = {...this.state}\n        copyState[id] = event.target.value\n        this.setState({\n            ...copyState\n        })\n    }\n    handleOnchangeDatepicker = (date) => {\n        this.setState({\n            birthday: date[0]\n        })\n    }\n    handleOnchangeSelect = (selectOption) => {\n        this.setState({\n            selectedGender: selectOption\n        })\n    }\n    buildTimeData = (dataTime, date) => {\n        let {language} = this.props\n        if (dataTime && !_.isEmpty(dataTime)) {\n            let time = language === LANGUAGE.VI ? dataTime.valueVi : dataTime.valueEn\n            let timeString = language === LANGUAGE.VI ?\n                moment.unix(+date / 1000).format('dddd DD/MM/YYYY')\n                :\n                moment.unix(+date / 1000).locale('en').format('ddd MM/DD/YYYY')\n\n            return `${time} - ${timeString}`\n        }\n\n    }\n    handleConfirmBooking = async () => {\n        let date = new Date(this.state.birthday).getTime()\n        let timeString = this.buildTimeData(this.props.dataTime, this.state.date)\n        this.setState({\n            isShowLoading: true\n        })\n        let res = await postPatientBookAppointmentParkage({\n            fullName: this.state.fullName,\n            address: this.state.address,\n            phoneNumber: this.state.phoneNumber,\n            email: this.state.email,\n            selectedGender: this.state.selectedGender.value,\n            reason: this.state.reason,\n            date: this.state.date,\n            birthday: date,\n            parkageId: this.state.parkageId,\n            timeType: this.state.timeType,\n            timeString: timeString,\n            language: this.props.language\n        })\n        if (res && res.errCode === 0) {\n            this.setState({\n                isShowLoading: false\n            })\n            toast.success(\"Booking Appointment succeed\")\n            this.props.closeBookingModal()\n        } else {\n            toast.error(\"Something Wrong\")\n            console.log(res);\n        }\n    }\n\n    render() {\n        let {isOpenModal, closeBookingModal, dataTime, parkageId,} = this.props\n        let {timeString, date} = this.state\n        console.log('check timestring', date)\n        return (\n            <>\n                <LoadingOverlay\n                    active={this.state.isShowLoading}\n                    spinner\n                    text='Loading'\n                >\n                    <Modal\n                        isOpen={isOpenModal}\n                        className={'booking-modal-container'}\n                        size='lg'\n                        centered\n                        toggle={closeBookingModal}\n                    >\n\n                        <div className='booking-modal-container'>\n                            <ModalHeader toggle={closeBookingModal}>\n                                <div className='booking-modal-header'>\n                                    <span className='left'>\n                                        <FormattedMessage id='booking-modal.title'/>\n                                    </span>\n                                    {/* <span className='right'\n                                onClick={closeBookingModal}\n                            ></span> */}\n                                </div>\n                            </ModalHeader>\n\n                            <ModalBody>\n                                <div className='booking-modal-body'>\n                                    <div className='doctor-info'>\n                                    </div>\n                                    <div className='price'>\n                                        <ProfileParkage\n                                            parkageId={parkageId}\n                                            dataTime={dataTime}\n                                            isShowDescriptionDoctor={false}\n                                            isShowLinkDetail={false}\n                                            isShowPrice={true}\n                                        />\n                                    </div>\n                                    <div className='row'>\n                                        <div className='col-6 form-group'>\n                                            <label><FormattedMessage id='booking-modal.fullname'/></label>\n                                            <input className='form-control'\n                                                   value={this.state.fullName}\n                                                   onChange={(event) => {\n                                                       this.handleOnchangeInput(event, 'fullName')\n                                                   }}\n                                            />\n                                        </div>\n                                        <div className='col-3 form-group'>\n                                            <label><FormattedMessage id='booking-modal.gender'/></label>\n                                            <Select\n                                                value={this.state.selectedGender}\n                                                options={this.state.genders}\n                                                onChange={this.handleOnchangeSelect}\n                                            />\n                                        </div>\n                                        <div className='col-3 form-group'>\n                                            <label><FormattedMessage id='booking-modal.birthday'/></label>\n                                            <DatePicker\n                                                className={'form-control'}\n                                                value={this.state.birthday}\n                                                onChange={this.handleOnchangeDatepicker}\n                                            />\n                                        </div>\n                                        <div className='col-6 form-group'>\n                                            <label>Email</label>\n                                            <input className='form-control'\n                                                   value={this.state.email}\n                                                   onChange={(event) => {\n                                                       this.handleOnchangeInput(event, 'email')\n                                                   }}\n                                            />\n                                        </div>\n                                        <div className='col-6 form-group'>\n                                            <label><FormattedMessage id='booking-modal.phonenumber'/></label>\n                                            <input className='form-control'\n                                                   value={this.state.phoneNumber}\n                                                   onChange={(event) => {\n                                                       this.handleOnchangeInput(event, 'phoneNumber')\n                                                   }}\n                                            />\n                                        </div>\n                                        <div className='col-12 form-group'>\n                                            <label><FormattedMessage id='booking-modal.address'/></label>\n                                            <input className='form-control'\n                                                   value={this.state.address}\n                                                   onChange={(event) => {\n                                                       this.handleOnchangeInput(event, 'address')\n                                                   }}\n                                            />\n                                        </div>\n                                        <div className='col-12 form-group'>\n                                            <label><FormattedMessage id='booking-modal.reasonbooking'/></label>\n                                            <input className='form-control'\n                                                   value={this.state.reason}\n                                                   onChange={(event) => {\n                                                       this.handleOnchangeInput(event, 'reason')\n                                                   }}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </ModalBody>\n                        </div>\n                        <ModalFooter>\n                            <Button color=\"primary\" className='px-3' onClick={() => {\n                                this.handleConfirmBooking()\n                            }}>\n                                <FormattedMessage id='booking-modal.btnConfirm'/>\n                            </Button>\n                            <Button color=\"secondary\" className='px-3' onClick={closeBookingModal}>\n                                <FormattedMessage id='booking-modal.btncancel'/>\n                            </Button>\n                        </ModalFooter>\n                    </Modal>\n                </LoadingOverlay>\n            </>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        genders: state.admin.genders\n\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        FetchGenderStart: () => dispatch(actions.FetchGenderStart()),\n\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModalParkage);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/Patient/Doctor/Modal/BookingModal.js",["396","397"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../../../store/actions\";\nimport { LANGUAGE } from '../../../../utils';\nimport './BookingModal.scss'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\nimport ProfileDoctor from '../ProfileDoctor';\nimport _ from 'lodash'\nimport DatePicker from '../../../../components/Input/DatePicker';\nimport Select from 'react-select'\nimport { toast } from 'react-toastify'\nimport { postPatientBookAppointment } from '../../../../services/userService'\nimport { FormattedMessage } from 'react-intl';\nimport moment from 'moment';\nimport LoadingOverlay from 'react-loading-overlay';\n\n\n\nclass BookingModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataProfile: {},\n            fullName: '',\n            address: '',\n            phoneNumber: '',\n            email: '',\n            genders: '',\n            selectedGender: '',\n            reason: '',\n            birthday: '',\n            doctorId: '',\n            timeType: '',\n            isShowLoading: false,\n\n        }\n    }\n    componentDidMount() {\n        this.props.FetchGenderStart()\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.genders !== this.props.genders) {\n            this.setState({\n                genders: this.buildDataGender(this.props.genders)\n            })\n        }\n        if (prevProps.language !== this.props.language) {\n            this.setState({\n                genders: this.buildDataGender(this.props.genders)\n            })\n        }\n        if (prevProps.dataTime !== this.props.dataTime) {\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\n                let doctorId = this.props.dataTime.doctorId\n                let timeType = this.props.dataTime.timeType\n                console.log('chekc timetype', this.props.dataTime.timeType);\n                this.setState({\n                    doctorId: doctorId,\n                    timeType: timeType\n                })\n            }\n        }\n    }\n    buildDataGender = (data) => {\n        let result = []\n        let { language } = this.props\n        if (data && data.length > 0) {\n            data.map(item => {\n                let object = {}\n                object.label = language === LANGUAGE.VI ? item.valueVi : item.valueEn\n                object.value = item.keyMap\n                result.push(object)\n            })\n        }\n        return result\n    }\n    handleOnchangeInput = (event, id) => {\n        let copyState = { ...this.state }\n        copyState[id] = event.target.value\n        this.setState({\n            ...copyState\n        })\n    }\n    handleOnchangeDatepicker = (date) => {\n        this.setState({\n            birthday: date[0]\n        })\n    }\n    handleOnchangeSelect = (selectOption) => {\n        this.setState({\n            selectedGender: selectOption\n        })\n    }\n    buildTimeData = (dataTime) => {\n        let { language } = this.props\n        if (dataTime && !_.isEmpty(dataTime)) {\n            let time = language === LANGUAGE.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn\n            let date = language === LANGUAGE.VI ?\n                moment.unix(+dataTime.date / 1000).format('dddd DD/MM/YYYY')\n                :\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd MM/DD/YYYY')\n\n            return `${time} - ${date}`\n        }\n\n    }\n    handleConfirmBooking = async () => {\n        let date = new Date(this.state.birthday).getTime()\n        let timeString = this.buildTimeData(this.props.dataTime)\n        this.setState({\n            isShowLoading: true\n        })\n        let res = await postPatientBookAppointment({\n            fullName: this.state.fullName,\n            address: this.state.address,\n            phoneNumber: this.state.phoneNumber,\n            email: this.state.email,\n            selectedGender: this.state.selectedGender.value,\n            reason: this.state.reason,\n            date: this.props.dataTime.date,\n            birthday: date,\n            doctorId: this.state.doctorId,\n            timeType: this.state.timeType,\n            timeString: timeString,\n            language: this.props.language\n        })\n        if (res && res.errCode === 0) {\n            this.setState({\n                isShowLoading: false\n            })\n            toast.success(\"Booking Appointment succeed\")\n            this.props.closeBookingModal()\n        } else {\n            toast.error(\"Something Wrong\")\n        }\n    }\n\n    render() {\n        let { isOpenModal, closeBookingModal, dataTime } = this.props\n        let doctorId = ''\n        if (dataTime && !_.isEmpty(dataTime)) {\n            doctorId = dataTime.doctorId\n        }\n        let { timeString } = this.state\n        console.log('check datatime accx', dataTime);\n        return (\n            <>\n                <LoadingOverlay\n                    active={this.state.isShowLoading}\n                    spinner\n                    text='Loading'\n                >\n                    <Modal\n                        isOpen={isOpenModal}\n                        className={'booking-modal-container'}\n                        size='lg'\n                        centered\n                        toggle={closeBookingModal}\n                    >\n\n                        <div className='booking-modal-container'>\n                            <ModalHeader toggle={closeBookingModal}>\n                                <div className='booking-modal-header'>\n                                    <span className='left'>\n                                        <FormattedMessage id='booking-modal.title' />\n                                    </span>\n                                    {/* <span className='right'\n                                onClick={closeBookingModal}\n                            ></span> */}\n                                </div>\n                            </ModalHeader>\n\n                            <ModalBody>\n                                <div className='booking-modal-body'>\n                                    <div className='doctor-info'>\n                                    </div>\n                                    <div className='price'>\n                                        <ProfileDoctor\n                                            doctorId={doctorId}\n                                            dataTime={dataTime}\n                                            isShowDescriptionDoctor={false}\n                                            isShowLinkDetail={false}\n                                            isShowPrice={true}\n                                        />\n                                    </div>\n                                    <div className='row'>\n                                        <div className='col-6 form-group'>\n                                            <label><FormattedMessage id='booking-modal.fullname' /></label>\n                                            <input className='form-control'\n                                                value={this.state.fullName}\n                                                onChange={(event) => { this.handleOnchangeInput(event, 'fullName') }}\n                                            />\n                                        </div>\n                                        <div className='col-3 form-group'>\n                                            <label><FormattedMessage id='booking-modal.gender' /></label>\n                                            <Select\n                                                value={this.state.selectedGender}\n                                                options={this.state.genders}\n                                                onChange={this.handleOnchangeSelect}\n                                            />\n                                        </div>\n                                        <div className='col-3 form-group'>\n                                            <label><FormattedMessage id='booking-modal.birthday' /></label>\n                                            <DatePicker\n                                                className={'form-control'}\n                                                value={this.state.birthday}\n                                                onChange={this.handleOnchangeDatepicker}\n                                            />\n                                        </div>\n                                        <div className='col-6 form-group'>\n                                            <label>Email</label>\n                                            <input className='form-control'\n                                                value={this.state.email}\n                                                onChange={(event) => { this.handleOnchangeInput(event, 'email') }}\n                                            />\n                                        </div>\n                                        <div className='col-6 form-group'>\n                                            <label><FormattedMessage id='booking-modal.phonenumber' /></label>\n                                            <input className='form-control'\n                                                value={this.state.phoneNumber}\n                                                onChange={(event) => { this.handleOnchangeInput(event, 'phoneNumber') }}\n                                            />\n                                        </div>\n                                        <div className='col-12 form-group'>\n                                            <label><FormattedMessage id='booking-modal.address' /></label>\n                                            <input className='form-control'\n                                                value={this.state.address}\n                                                onChange={(event) => { this.handleOnchangeInput(event, 'address') }}\n                                            />\n                                        </div>\n                                        <div className='col-12 form-group'>\n                                            <label><FormattedMessage id='booking-modal.reasonbooking' /></label>\n                                            <input className='form-control'\n                                                value={this.state.reason}\n                                                onChange={(event) => { this.handleOnchangeInput(event, 'reason') }}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </ModalBody>\n                        </div>\n                        <ModalFooter>\n                            <Button color=\"primary\" className='px-3' onClick={() => { this.handleConfirmBooking() }}>\n                                <FormattedMessage id='booking-modal.btnConfirm' />\n                            </Button>\n                            <Button color=\"secondary\" className='px-3' onClick={closeBookingModal}>\n                                <FormattedMessage id='booking-modal.btncancel' />\n                            </Button>\n                        </ModalFooter>\n                    </Modal>\n                </LoadingOverlay>\n            </>\n        )\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn: state.user.isLoggedIn,\n        language: state.app.language,\n        genders: state.admin.genders\n\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        FetchGenderStart: () => dispatch(actions.FetchGenderStart()),\n\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\n","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/RemedyModal.js",["398","399","400","401"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './RemedyModal.scss';\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\nimport {CommonUtils} from '../../../utils';\n\nclass RemedyModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            imgBase64: '',\n        }\n    }\n\n    async componentDidMount() {\n        if (this.props.dataModal) {\n            this.setState({\n                email: this.props.dataModal.email\n            })\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.dataModal !== prevProps.dataModal) {\n            this.setState({\n                email: this.props.dataModal.email\n            })\n        }\n    }\n    handleOnchangeEmail = (event) => {\n        this.setState({\n            email: event.target.value\n        })\n    }\n    handleOnchangeImage = async (event) => {\n        let data = event.target.files\n        let file = data[0]\n        if (file) {\n            let base64 = await CommonUtils.getBase64(file)\n            this.setState({\n                imgBase64: base64\n            })\n        }\n    }\n    handleSendRemedy = () => {\n        this.props.sendRemedy(this.state)\n    }\n\n    toggle = () => {\n        this.props.closeRemedyModal()\n    }\n    render() {\n        let { isOpenModal, dataModal, sendRemedy, closeRemedyModal } = this.props\n        return (\n\n            <Modal isOpen={this.props.isOpenModal} toggle={() => { this.toggle() }} className={\"modal-container-remedy\"} size=\"md\" centered  >\n                <ModalHeader toggle={() => { this.toggle() }}>Gửi hóa đơn khám bệnh</ModalHeader>\n                <ModalBody>\n                    <div className='row'>\n                        <div className='col-6 form-group'>\n                            <label>Email Bệnh nhân</label>\n                            <input className='form-control' type='email'\n                                onChange={(event) => { this.handleOnchangeEmail(event) }}\n                                value={this.state.email}\n                            />\n                        </div>\n                        <div className='col-6 form-group'>\n                            <label>Chọn file đơn thuốc</label>\n                            <input className='form-control' type='file'\n                                onChange={(event) => { this.handleOnchangeImage(event) }}\n                            />\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" className='px-3' onClick={() => { this.handleSendRemedy() }}>\n                        Send\n                    </Button>\n                    <Button color=\"secondary\" className='px-3' onClick={() => { this.toggle() }}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal >\n\n        )\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\n","/Users/namle/Desktop/fe-bookingcare/src/components/Input/DatePicker.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/TableManageUser.js",["402","403"],"import React, {Component} from 'react';\nimport * as actions from \"../../../store/actions\";\nimport {connect} from 'react-redux';\nimport MarkdownIt from 'markdown-it';\nimport 'react-markdown-editor-lite/lib/index.css';\n\n\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\n\n// Finish!\nfunction handleEditorChange({ html, text }) {\n    console.log('handleEditorChange', html, text);\n}\n\nclass TableManageUser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersRedux: []\n        }\n    }\n    async componentDidMount() {\n        this.props.fetchUserRedux()\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.listUsers !== this.props.listUsers) {\n            this.setState({\n                usersRedux: this.props.listUsers\n            })\n        }\n    }\n    handleDeleteUser = (user) => {\n        this.props.deleteAUserRedux(user.id)\n    }\n    handleEditUser = (user) => {\n        this.props.handleEditUserFromParent(user)\n    }\n    render() {\n        let arrUser = this.state.usersRedux\n\n        return (\n            <>\n                <table id=\"customers\">\n                    <tbody>\n                        <tr>\n                            <th>Email</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Address</th>\n                            <th>Action</th>\n                        </tr>\n                        {arrUser && arrUser.length > 0 && arrUser.map((item, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>{item.email}</td>\n                                    <td>{item.firstName}</td>\n                                    <td>{item.lastName}</td>\n                                    <td>{item.address}</td>\n                                    <td>\n                                        <button className='btn-edit' onClick={() => { this.handleEditUser(item) }} >Edit</button>\n                                        <button className='btn-delete' onClick={() => { this.handleDeleteUser(item) }} >Delete</button>\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                {/* <MdEditor style={{ height: '500px' }} renderHTML={text => mdParser.render(text)} onChange={handleEditorChange} /> */}\n            </>\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        listUsers: state.admin.users,\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\n        deleteAUserRedux: (id) => dispatch(actions.deleteAUser(id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\n","/Users/namle/Desktop/fe-bookingcare/src/utils/emitter.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/Header/menuApp.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/ModalEditUser.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/ModalUser.js",[],"/Users/namle/Desktop/fe-bookingcare/src/components/Navigator.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/actions/adminAction.js",[],"/Users/namle/Desktop/fe-bookingcare/src/components/CustomToast.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/actions/userActions.js",[],"/Users/namle/Desktop/fe-bookingcare/src/store/actions/appActions.js",[],"/Users/namle/Desktop/fe-bookingcare/src/containers/System/Admin/SignUp.js",["404","405","406"],"import React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { getAllCodeService } from '../../../services/userService';\nimport { LANGUAGE, CRUD_ACTIONS, CommonUtils } from '../../../utils';\nimport * as actions from '../../../store/actions';\nimport './SignUp.scss';\nimport Lightbox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css';\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            genderArr: [],\n            positionArr: [],\n            roleArr: [],\n            previewImgURL: '',\n            isOpen: false,\n\n            email: '',\n            password: '',\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            address: '',\n            gender: '',\n            position: '',\n            role: '',\n            avatar: '',\n            action: '',\n            userEditId: ''\n\n        }\n    }\n\n    async componentDidMount() {\n        this.props.getGenderStart();\n        this.props.getPositionStart();\n        this.props.getRoleStart();\n    }\n    componentDidUpdate(prevProps, preState, snapshot) {\n        if (prevProps.genderRedux !== this.props.genderRedux) {\n            let arrGenders = this.props.genderRedux;\n            this.setState({\n                genderArr: arrGenders,\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : ''\n            })\n        }\n        if (prevProps.roleRedux !== this.props.roleRedux) {\n            let arrRoles = this.props.roleRedux\n            this.setState({\n                roleArr: arrRoles,\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\n            })\n        }\n        if (prevProps.positionRedux !== this.props.positionRedux) {\n            let arrPositions = this.props.positionRedux\n            this.setState({\n                positionArr: arrPositions,\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : ''\n            })\n        }\n        if (prevProps.listUsers !== this.props.listUsers) {\n            let arrGenders = this.props.genderRedux;\n            let arrRoles = this.props.roleRedux;\n            let arrPositions = this.props.positionRedux;\n            this.setState({\n                email: '',\n                password: '',\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n                address: '',\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\n                avatar: '',\n                action: CRUD_ACTIONS.CREATE,\n                previewImgURL: '',\n\n            }\n            )\n        }\n\n    }\n\n    handleOnchangeImage = async (event) => {\n        let data = event.target.files;\n        let file = data[0];\n        if (file) {\n            let base64 = await CommonUtils.getBase64(file);\n            let objectUrl = URL.createObjectURL(file);\n            this.setState({\n                previewImgURL: objectUrl,\n                avatar: base64\n            })\n        }\n    }\n    openPreviewImage = () => {\n        if (!this.state.previewImgURL) return;\n        this.setState({\n            isOpen: true\n        })\n    }\n\n    handleSaveUser = () => {\n        let isValid = this.checkValidInput();\n        if (isValid === false) return;\n        this.props.createNewUser({\n            email: this.state.email,\n            password: this.state.password,\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            address: this.state.address,\n            phoneNumber: this.state.phoneNumber,\n            gender: this.state.gender,\n            roleId: this.state.role,\n            positionId: this.state.position,\n            avatar: this.state.avatar,\n        })\n\n\n    }\n\n    checkValidInput = () => {\n        let isValid = true;\n        let arrCheck = ['email', 'password', 'firstName', 'lastName', 'phoneNumber', 'address']\n        for (let i = 0; i < arrCheck.length; i++) {\n            if (!this.state[arrCheck[i]]) {\n                isValid = false;\n                alert('This input is required:' + arrCheck[i])\n                break;\n            }\n        }\n        return isValid;\n    }\n\n    onChangeInput = (event, id) => {\n\n        let copyState = { ...this.state }\n        copyState[id] = event.target.value;\n        this.setState({\n            ...copyState\n        })\n\n    }\n\n    handleEditUserFromParent = (user) => {\n        let imageBase64 = '';\n        if (user.image) {\n            imageBase64 = new Buffer(user.image, 'base64').toString('binary');\n        }\n        this.setState({\n            email: user.email,\n            password: 'HARDCODE',\n            firstName: user.firstName,\n            lastName: user.lastName,\n            address: user.address,\n            phoneNumber: user.phoneNumber,\n            gender: user.gender,\n            role: user.roleId,\n            position: user.positionId,\n            avatar: '',\n            previewImgURL: imageBase64,\n            action: CRUD_ACTIONS.EDIT,\n            userEditId: user.id\n        })\n    }\n    returnToLogin = () => {\n        if (this.props.history) {\n            this.props.history.push(`/login`)\n        }\n    }\n\n    render() {\n        let genders = this.state.genderArr;\n        console.log(genders)\n        let roles = this.state.roleArr;\n        let positions = this.state.positionArr;\n        let language = this.props.language;\n        let isGetGenders = this.props.isLoadingGender;\n        let { email, password, firstName, lastName, phoneNumber, address, gender, position, role, avatar } = this.state;\n        return (\n            <div className='user-redux-container'>\n                <div className='title'>\n                    TẠO TÀI KHOẢN MỚI\n                </div>\n                <div className='user-redux-body'>\n                    <div className='container'>\n                        <div className='row'>\n                            <div className='col-12 my-3'><FormattedMessage id=\"manage-user.add\" /></div>\n                            <div className='col-12'>{isGetGenders === true ? 'Loading genders' : ''}</div>\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.email\" /></label>\n                                <input className='form-control' type='email'\n                                    value={email}\n                                    onChange={(event) => { this.onChangeInput(event, 'email') }}\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\n                                />\n                            </div>\n\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.password\" /></label>\n                                <input className='form-control' type='password'\n                                    value={password}\n                                    onChange={(event) => { this.onChangeInput(event, 'password') }}\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\n                                />\n                            </div>\n\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.first-name\" /></label>\n                                <input className='form-control' type='text'\n                                    value={firstName}\n                                    onChange={(event) => { this.onChangeInput(event, 'firstName') }}\n                                />\n                            </div>\n\n\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.last-name\" /></label>\n                                <input className='form-control' type='text'\n                                    value={lastName}\n                                    onChange={(event) => { this.onChangeInput(event, 'lastName') }}\n                                />\n                            </div>\n\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.phone-number\" /></label>\n                                <input className='form-control' type='text'\n                                    value={phoneNumber}\n                                    onChange={(event) => { this.onChangeInput(event, 'phoneNumber') }}\n                                />\n                            </div>\n\n                            <div className='col-9'>\n                                <label><FormattedMessage id=\"manage-user.address\" /></label>\n                                <input className='form-control' type='text'\n                                    value={address}\n                                    onChange={(event) => { this.onChangeInput(event, 'address') }}\n                                />\n                            </div>\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.gender\" /></label>\n                                <select className='form-control'\n\n                                    onChange={(event) => { this.onChangeInput(event, 'gender') }}\n                                    value={gender}\n                                >\n                                    {genders && genders.length > 0 && genders.map((item, index) => {\n                                        return (\n                                            <option key={index} value={item.keyMap}>{language === language.VI ? item.valueVi : item.valueEn}</option>\n                                        )\n                                    })}\n                                </select>\n                            </div>\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.position\" /></label>\n                                <select className='form-control'\n                                    onChange={(event) => { this.onChangeInput(event, 'position') }}\n                                    value={position}\n                                >\n                                    {positions && positions.length > 0 && positions.map((item, index) => {\n                                        return (\n                                            <option key={index} value={item.keyMap}>{language === language.VI ? item.valueVi : item.valueEn}</option>\n                                        )\n                                    })}\n                                </select>\n                            </div>\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.role\" /></label>\n                                <select className='form-control'\n                                    onChange={(event) => { this.onChangeInput(event, 'role') }}\n                                    value={role}\n                                >\n                                    {roles && roles.length > 0 && roles.map((item, index) => {\n                                        return (\n                                            <option key={index} value={item.keyMap}>{language === language.VI ? item.valueVi : item.valueEn}</option>\n                                        )\n                                    })}\n                                </select>\n                            </div>\n                            <div className='col-3'>\n                                <label><FormattedMessage id=\"manage-user.image\" /></label>\n                                <div className='preview-img-container'>\n                                    <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnchangeImage(event)} />\n                                    <label className='label-upload' htmlFor='previewImg'>Tải ảnh<i className='fas fa-upload'></i></label>\n                                    <div className='preview-image' style={{ backgroundImage: `url(${this.state.previewImgURL})` }} onClick={() => this.openPreviewImage()}\n                                    ></div>\n                                </div>\n                            </div>\n                            <div className='col-12 my-3'>\n                                <button className='btn btn-primary'\n                                    onClick={() => this.handleSaveUser()}\n                                >\n                                    Tạo tài khoản\n                                </button>\n                            </div>\n                            <div className='col-12 my-3'>\n                                <button className='btn btn-primary'\n                                    onClick={() => this.returnToLogin()}\n                                >\n                                    Đăng nhập\n                                </button>\n                            </div>\n\n\n                        </div>\n                    </div>\n                </div>\n                {this.state.isOpen === true &&\n                    <Lightbox\n                        mainSrc={this.state.previewImgURL}\n                        onCloseRequest={() => this.setState({ isOpen: false })}\n                    />\n                }\n            </div>\n\n        )\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        language: state.app.language,\n        genderRedux: state.admin.genders,\n        roleRedux: state.admin.roles,\n        positionRedux: state.admin.positions,\n        isLoadingGender: state.admin.isLoadingGender,\n        listUsers: state.admin.users,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getGenderStart: () => dispatch(actions.FetchGenderStart()),\n        getPositionStart: () => dispatch(actions.FetchPositionStart()),\n        getRoleStart: () => dispatch(actions.FetchRoleStart()),\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\n        editAUserRedux: (data) => dispatch(actions.editAUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);","/Users/namle/Desktop/fe-bookingcare/src/containers/System/Doctor/ManageHistory.js",[],"/Users/namle/Desktop/fe-bookingcare/src/components/ConfirmModal.js",[],{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","replacedBy":"410"},{"ruleId":"411","severity":1,"message":"412","line":26,"column":1,"nodeType":"413","endLine":31,"endColumn":3},{"ruleId":"414","severity":1,"message":"415","line":3,"column":10,"nodeType":"416","messageId":"417","endLine":3,"endColumn":18},{"ruleId":"414","severity":1,"message":"418","line":12,"column":17,"nodeType":"416","messageId":"417","endLine":12,"endColumn":27},{"ruleId":"414","severity":1,"message":"419","line":4,"column":10,"nodeType":"416","messageId":"417","endLine":4,"endColumn":23},{"ruleId":"414","severity":1,"message":"420","line":41,"column":15,"nodeType":"416","messageId":"417","endLine":41,"endColumn":23},{"ruleId":"421","severity":1,"message":"422","line":35,"column":38,"nodeType":"423","messageId":"424","endLine":35,"endColumn":40},{"ruleId":"414","severity":1,"message":"420","line":34,"column":14,"nodeType":"416","messageId":"417","endLine":34,"endColumn":22},{"ruleId":"414","severity":1,"message":"420","line":37,"column":14,"nodeType":"416","messageId":"417","endLine":37,"endColumn":22},{"ruleId":"414","severity":1,"message":"425","line":38,"column":29,"nodeType":"416","messageId":"417","endLine":38,"endColumn":38},{"ruleId":"421","severity":1,"message":"422","line":110,"column":45,"nodeType":"423","messageId":"424","endLine":110,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":120,"column":45,"nodeType":"423","messageId":"424","endLine":120,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":130,"column":45,"nodeType":"423","messageId":"424","endLine":130,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":40,"column":38,"nodeType":"423","messageId":"424","endLine":40,"endColumn":40},{"ruleId":"421","severity":1,"message":"422","line":78,"column":38,"nodeType":"423","messageId":"424","endLine":78,"endColumn":40},{"ruleId":"421","severity":1,"message":"422","line":51,"column":38,"nodeType":"423","messageId":"424","endLine":51,"endColumn":40},{"ruleId":"421","severity":1,"message":"422","line":63,"column":38,"nodeType":"423","messageId":"424","endLine":63,"endColumn":40},{"ruleId":"421","severity":1,"message":"422","line":73,"column":38,"nodeType":"423","messageId":"424","endLine":73,"endColumn":40},{"ruleId":"426","severity":1,"message":"427","line":10,"column":50,"nodeType":"428","messageId":"429","endLine":10,"endColumn":114,"fix":"430"},{"ruleId":"414","severity":1,"message":"431","line":3,"column":13,"nodeType":"416","messageId":"417","endLine":3,"endColumn":20},{"ruleId":"414","severity":1,"message":"431","line":3,"column":13,"nodeType":"416","messageId":"417","endLine":3,"endColumn":20},{"ruleId":"414","severity":1,"message":"432","line":47,"column":14,"nodeType":"416","messageId":"417","endLine":47,"endColumn":26},{"ruleId":"421","severity":1,"message":"422","line":53,"column":41,"nodeType":"423","messageId":"424","endLine":53,"endColumn":43},{"ruleId":"421","severity":1,"message":"422","line":105,"column":52,"nodeType":"423","messageId":"424","endLine":105,"endColumn":54},{"ruleId":"414","severity":1,"message":"433","line":49,"column":14,"nodeType":"416","messageId":"417","endLine":49,"endColumn":25},{"ruleId":"421","severity":1,"message":"422","line":95,"column":45,"nodeType":"423","messageId":"424","endLine":95,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":105,"column":45,"nodeType":"423","messageId":"424","endLine":105,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":115,"column":45,"nodeType":"423","messageId":"424","endLine":115,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":123,"column":45,"nodeType":"423","messageId":"424","endLine":123,"endColumn":47},{"ruleId":"414","severity":1,"message":"434","line":144,"column":14,"nodeType":"416","messageId":"417","endLine":144,"endColumn":27},{"ruleId":"414","severity":1,"message":"420","line":288,"column":14,"nodeType":"416","messageId":"417","endLine":288,"endColumn":22},{"ruleId":"414","severity":1,"message":"435","line":321,"column":14,"nodeType":"416","messageId":"417","endLine":321,"endColumn":35},{"ruleId":"421","severity":1,"message":"422","line":50,"column":45,"nodeType":"423","messageId":"424","endLine":50,"endColumn":47},{"ruleId":"414","severity":1,"message":"436","line":142,"column":14,"nodeType":"416","messageId":"417","endLine":142,"endColumn":25},{"ruleId":"414","severity":1,"message":"437","line":143,"column":14,"nodeType":"416","messageId":"417","endLine":143,"endColumn":24},{"ruleId":"414","severity":1,"message":"435","line":143,"column":26,"nodeType":"416","messageId":"417","endLine":143,"endColumn":47},{"ruleId":"414","severity":1,"message":"420","line":53,"column":13,"nodeType":"416","messageId":"417","endLine":53,"endColumn":21},{"ruleId":"421","severity":1,"message":"422","line":56,"column":45,"nodeType":"423","messageId":"424","endLine":56,"endColumn":47},{"ruleId":"414","severity":1,"message":"438","line":146,"column":14,"nodeType":"416","messageId":"417","endLine":146,"endColumn":26},{"ruleId":"414","severity":1,"message":"439","line":147,"column":57,"nodeType":"416","messageId":"417","endLine":147,"endColumn":68},{"ruleId":"414","severity":1,"message":"420","line":97,"column":15,"nodeType":"416","messageId":"417","endLine":97,"endColumn":23},{"ruleId":"421","severity":1,"message":"422","line":98,"column":45,"nodeType":"423","messageId":"424","endLine":98,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":108,"column":45,"nodeType":"423","messageId":"424","endLine":108,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":118,"column":45,"nodeType":"423","messageId":"424","endLine":118,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":128,"column":45,"nodeType":"423","messageId":"424","endLine":128,"endColumn":47},{"ruleId":"421","severity":1,"message":"422","line":136,"column":45,"nodeType":"423","messageId":"424","endLine":136,"endColumn":47},{"ruleId":"414","severity":1,"message":"436","line":262,"column":14,"nodeType":"416","messageId":"417","endLine":262,"endColumn":25},{"ruleId":"414","severity":1,"message":"437","line":264,"column":14,"nodeType":"416","messageId":"417","endLine":264,"endColumn":24},{"ruleId":"414","severity":1,"message":"435","line":264,"column":26,"nodeType":"416","messageId":"417","endLine":264,"endColumn":47},{"ruleId":"414","severity":1,"message":"431","line":3,"column":13,"nodeType":"416","messageId":"417","endLine":3,"endColumn":20},{"ruleId":"414","severity":1,"message":"440","line":8,"column":8,"nodeType":"416","messageId":"417","endLine":8,"endColumn":14},{"ruleId":"421","severity":1,"message":"422","line":77,"column":27,"nodeType":"423","messageId":"424","endLine":77,"endColumn":29},{"ruleId":"414","severity":1,"message":"441","line":150,"column":14,"nodeType":"416","messageId":"417","endLine":150,"endColumn":24},{"ruleId":"421","severity":1,"message":"422","line":68,"column":27,"nodeType":"423","messageId":"424","endLine":68,"endColumn":29},{"ruleId":"414","severity":1,"message":"441","line":144,"column":15,"nodeType":"416","messageId":"417","endLine":144,"endColumn":25},{"ruleId":"414","severity":1,"message":"442","line":53,"column":15,"nodeType":"416","messageId":"417","endLine":53,"endColumn":26},{"ruleId":"414","severity":1,"message":"443","line":53,"column":28,"nodeType":"416","messageId":"417","endLine":53,"endColumn":37},{"ruleId":"414","severity":1,"message":"444","line":53,"column":39,"nodeType":"416","messageId":"417","endLine":53,"endColumn":49},{"ruleId":"414","severity":1,"message":"445","line":53,"column":51,"nodeType":"416","messageId":"417","endLine":53,"endColumn":67},{"ruleId":"414","severity":1,"message":"446","line":8,"column":7,"nodeType":"416","messageId":"417","endLine":8,"endColumn":15},{"ruleId":"414","severity":1,"message":"447","line":11,"column":10,"nodeType":"416","messageId":"417","endLine":11,"endColumn":28},{"ruleId":"414","severity":1,"message":"448","line":4,"column":10,"nodeType":"416","messageId":"417","endLine":4,"endColumn":27},{"ruleId":"414","severity":1,"message":"449","line":5,"column":10,"nodeType":"416","messageId":"417","endLine":5,"endColumn":18},{"ruleId":"414","severity":1,"message":"450","line":182,"column":99,"nodeType":"416","messageId":"417","endLine":182,"endColumn":105},"no-native-reassign",["451"],"no-negated-in-lhs",["452"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is assigned a value but never used.","'getAllDoctors' is defined but never used.","'language' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'parkageId' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"453","text":"454"},"'actions' is defined but never used.","'arrSpecialty' is assigned a value but never used.","'arrHandbook' is assigned a value but never used.","'clinicParkage' is assigned a value but never used.","'allRequiredDoctorInfo' is assigned a value but never used.","'listDoctors' is assigned a value but never used.","'allDoctors' is assigned a value but never used.","'listParkages' is assigned a value but never used.","'allParkages' is assigned a value but never used.","'moment' is defined but never used.","'timeString' is assigned a value but never used.","'isOpenModal' is assigned a value but never used.","'dataModal' is assigned a value but never used.","'sendRemedy' is assigned a value but never used.","'closeRemedyModal' is assigned a value but never used.","'mdParser' is assigned a value but never used.","'handleEditorChange' is defined but never used.","'getAllCodeService' is defined but never used.","'LANGUAGE' is defined but never used.","'avatar' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[303,303]," rel=\"noreferrer\""]