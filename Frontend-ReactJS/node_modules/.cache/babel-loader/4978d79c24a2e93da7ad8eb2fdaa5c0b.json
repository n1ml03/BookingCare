{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { createDetailDoctor, createNewUserAPI, deleteUserAPI, editUserAPI, getAllClinic, getallcodeServive, getAllDoctors, getAllSpecialty, getAllUsers, getDetailInfoDoctor, getTopDoctorHomeService } from '../../services/userService';\nimport { toast } from 'react-toastify';\nexport const FetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getallcodeServive('GENDER');\n      if (res && res.errCode === 0) {\n        dispatch(FetchGenderSuccess(res.data));\n      } else {\n        dispatch(FetchGenderFail());\n      }\n    } catch (error) {\n      dispatch(FetchGenderFail());\n    }\n  };\n};\n_c = FetchGenderStart;\nexport const FetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\n_c2 = FetchGenderSuccess;\nexport const FetchGenderFail = () => ({\n  type: actionTypes.FETCH_GENDER_FAIL\n});\n_c3 = FetchGenderFail;\nexport const FetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getallcodeServive('POSITION');\n      if (res && res.errCode === 0) {\n        dispatch(FetchPositionSuccess(res.data));\n      } else {\n        dispatch(FetchPositionFail());\n      }\n    } catch (error) {\n      dispatch(FetchPositionFail());\n    }\n  };\n};\n_c4 = FetchPositionStart;\nexport const FetchPositionSuccess = Data => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: Data\n});\n_c5 = FetchPositionSuccess;\nexport const FetchPositionFail = () => ({\n  type: actionTypes.FETCH_POSITION_FAIL\n});\n_c6 = FetchPositionFail;\nexport const FetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getallcodeServive('ROLE');\n      if (res && res.errCode === 0) {\n        dispatch(FetchRoleSuccess(res.data));\n      } else {\n        dispatch(FetchRoleFail());\n      }\n    } catch (error) {\n      dispatch(FetchRoleFail());\n    }\n  };\n};\n_c7 = FetchRoleStart;\nexport const FetchRoleSuccess = Data => ({\n  type: actionTypes.FETCH_ROLEID_SUCCESS,\n  data: Data\n});\n_c8 = FetchRoleSuccess;\nexport const FetchRoleFail = () => ({\n  type: actionTypes.FETCH_ROLEID_FAIL\n});\n_c9 = FetchRoleFail;\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserAPI(data);\n      if (res && res.errCode === 0) {\n        toast.success('Create New User Success');\n        dispatch(saveUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error('Create New User Fail, Your email have been used');\n        dispatch(saveUserFail());\n      }\n    } catch (error) {\n      dispatch(saveUserFail());\n    }\n  };\n};\nexport const saveUserSuccess = data => ({\n  type: actionTypes.CREATE_USER_SUCCESS\n  // data: data\n});\nexport const saveUserFail = () => ({\n  type: actionTypes.CREATE_USER_FAIL\n});\nexport const fetchAllUsersStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers('ALL');\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllUsersSuccess(res.users));\n      } else {\n        toast.error('Fetch All User Error');\n        dispatch(fetchAllUsersFail());\n      }\n    } catch (error) {\n      toast.error('Fetch All User Error');\n      dispatch(fetchAllUsersFail());\n    }\n  };\n};\nexport const fetchAllUsersSuccess = data => ({\n  type: actionTypes.FETCH_ALL_USER_SUCCESS,\n  users: data\n});\nexport const fetchAllUsersFail = () => ({\n  type: actionTypes.FETCH_ALL_USER_FAIL\n});\nexport const deleteAUser = userID => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserAPI(userID);\n      if (res && res.errCode === 0) {\n        dispatch(DeleteAUserSuccess());\n        toast.success('Delete User Success');\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error('Delete User Error');\n        dispatch(DeleteUsersFail());\n      }\n    } catch (error) {\n      toast.error('Delete User Error');\n      dispatch(DeleteUsersFail());\n    }\n  };\n};\nexport const DeleteAUserSuccess = () => ({\n  type: actionTypes.DELETE_USER_SUCCESS\n});\n_c10 = DeleteAUserSuccess;\nexport const DeleteUsersFail = () => ({\n  type: actionTypes.DELETE_USER_FAIL\n});\n_c11 = DeleteUsersFail;\nexport const editAUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserAPI(data);\n      if (res && res.errCode === 0) {\n        toast.success('Update User Success');\n        dispatch(editAUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error('Update User Error');\n        dispatch(editUsersFail());\n      }\n    } catch (error) {\n      dispatch(saveUserFail());\n      toast.error('Update User Error');\n    }\n  };\n};\nexport const editAUserSuccess = () => ({\n  type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUsersFail = () => ({\n  type: actionTypes.EDIT_USER_FAIL\n});\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService('');\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTOR_FAIL\n      });\n    }\n  };\n};\nexport const fetchAllDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors();\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\n          dataDr: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTOR_FAIL\n      });\n    }\n  };\n};\nexport const createDetailDoctorAction = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createDetailDoctor(data);\n      if (res && res.errCode === 0) {\n        toast.success('Create Detail Dr Success');\n        dispatch({\n          type: actionTypes.CREATE_DETAIL_DOCTOR_SUCCESS\n        });\n      } else {\n        toast.error('Create Detail Dr Fail');\n        dispatch({\n          type: actionTypes.CREATE_DETAIL_DOCTOR_FAIL\n        });\n      }\n    } catch (error) {\n      toast.error('Create Detail Dr Fail');\n      dispatch({\n        type: actionTypes.CREATE_DETAIL_DOCTOR_FAIL\n      });\n    }\n  };\n};\nexport const fetchDetailDoctor = id => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getDetailInfoDoctor(id);\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_DETAIL_DOCTOR_SUCCESS,\n          dataDetailDoctor: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_DETAIL_DOCTOR_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_DETAIL_DOCTOR_FAIL\n      });\n    }\n  };\n};\nexport const fetchAllScheduleTime = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getallcodeServive('TIME');\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAIL\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAIL\n      });\n    }\n  };\n};\nexport const getAllRequiredDoctorInfo = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_START\n      });\n      let resPrice = await getallcodeServive('PRICE');\n      let resPayment = await getallcodeServive('PAYMENT');\n      let resProvince = await getallcodeServive('PROVINCE');\n      let resCategory = await getallcodeServive('CATEGORY');\n      let resSpecialty = await getAllSpecialty();\n      let resClinic = await getAllClinic();\n      if (resPrice && resPrice.errCode === 0 && resPayment && resPayment.errCode === 0 && resProvince && resProvince.errCode === 0 && resCategory && resCategory.errCode === 0 && resSpecialty && resSpecialty.errCode === 0 && resClinic && resClinic.errCode === 0) {\n        let data = {\n          resPrice: resPrice.data,\n          resPayment: resPayment.data,\n          resProvince: resProvince.data,\n          resCategory: resCategory.data,\n          resSpecialty: resSpecialty.data,\n          resClinic: resClinic.data\n        };\n        dispatch(FetchRequireDoctorInfoSuccess(data));\n      } else {\n        dispatch(FetchRequireDoctorInfoFail());\n      }\n    } catch (error) {\n      dispatch(FetchRequireDoctorInfoFail());\n    }\n  };\n};\nexport const FetchRequireDoctorInfoSuccess = allRequiredData => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS,\n  data: allRequiredData\n});\n_c12 = FetchRequireDoctorInfoSuccess;\nexport const FetchRequireDoctorInfoFail = () => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAIL\n});\n_c13 = FetchRequireDoctorInfoFail;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"FetchGenderStart\");\n$RefreshReg$(_c2, \"FetchGenderSuccess\");\n$RefreshReg$(_c3, \"FetchGenderFail\");\n$RefreshReg$(_c4, \"FetchPositionStart\");\n$RefreshReg$(_c5, \"FetchPositionSuccess\");\n$RefreshReg$(_c6, \"FetchPositionFail\");\n$RefreshReg$(_c7, \"FetchRoleStart\");\n$RefreshReg$(_c8, \"FetchRoleSuccess\");\n$RefreshReg$(_c9, \"FetchRoleFail\");\n$RefreshReg$(_c10, \"DeleteAUserSuccess\");\n$RefreshReg$(_c11, \"DeleteUsersFail\");\n$RefreshReg$(_c12, \"FetchRequireDoctorInfoSuccess\");\n$RefreshReg$(_c13, \"FetchRequireDoctorInfoFail\");","map":{"version":3,"names":["actionTypes","createDetailDoctor","createNewUserAPI","deleteUserAPI","editUserAPI","getAllClinic","getallcodeServive","getAllDoctors","getAllSpecialty","getAllUsers","getDetailInfoDoctor","getTopDoctorHomeService","toast","FetchGenderStart","dispatch","getState","type","FETCH_GENDER_START","res","errCode","FetchGenderSuccess","data","FetchGenderFail","error","_c","genderData","FETCH_GENDER_SUCCESS","_c2","FETCH_GENDER_FAIL","_c3","FetchPositionStart","FetchPositionSuccess","FetchPositionFail","_c4","Data","FETCH_POSITION_SUCCESS","_c5","FETCH_POSITION_FAIL","_c6","FetchRoleStart","FetchRoleSuccess","FetchRoleFail","_c7","FETCH_ROLEID_SUCCESS","_c8","FETCH_ROLEID_FAIL","_c9","createNewUser","success","saveUserSuccess","fetchAllUsersStart","saveUserFail","CREATE_USER_SUCCESS","CREATE_USER_FAIL","fetchAllUsersSuccess","users","fetchAllUsersFail","FETCH_ALL_USER_SUCCESS","FETCH_ALL_USER_FAIL","deleteAUser","userID","DeleteAUserSuccess","DeleteUsersFail","DELETE_USER_SUCCESS","_c10","DELETE_USER_FAIL","_c11","editAUser","editAUserSuccess","editUsersFail","EDIT_USER_SUCCESS","EDIT_USER_FAIL","fetchTopDoctor","FETCH_TOP_DOCTOR_SUCCESS","dataDoctors","FETCH_TOP_DOCTOR_FAIL","fetchAllDoctor","FETCH_ALL_DOCTOR_SUCCESS","dataDr","FETCH_ALL_DOCTOR_FAIL","createDetailDoctorAction","CREATE_DETAIL_DOCTOR_SUCCESS","CREATE_DETAIL_DOCTOR_FAIL","fetchDetailDoctor","id","FETCH_DETAIL_DOCTOR_SUCCESS","dataDetailDoctor","FETCH_DETAIL_DOCTOR_FAIL","fetchAllScheduleTime","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_TIME_FAIL","getAllRequiredDoctorInfo","FETCH_REQUIRED_DOCTOR_INFO_START","resPrice","resPayment","resProvince","resCategory","resSpecialty","resClinic","FetchRequireDoctorInfoSuccess","FetchRequireDoctorInfoFail","allRequiredData","FETCH_REQUIRED_DOCTOR_INFO_SUCCESS","_c12","FETCH_REQUIRED_DOCTOR_INFO_FAIL","_c13","$RefreshReg$"],"sources":["/Users/namle/Desktop/fe-bookingcare/src/store/actions/adminAction.js"],"sourcesContent":["import actionTypes from './actionTypes';\nimport {\n    createDetailDoctor,\n    createNewUserAPI,\n    deleteUserAPI,\n    editUserAPI,\n    getAllClinic,\n    getallcodeServive,\n    getAllDoctors,\n    getAllSpecialty,\n    getAllUsers,\n    getDetailInfoDoctor,\n    getTopDoctorHomeService\n} from '../../services/userService';\nimport {toast} from 'react-toastify';\n\nexport const FetchGenderStart = () => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch({type: actionTypes.FETCH_GENDER_START})\n            let res = await getallcodeServive('GENDER')\n            if (res && res.errCode === 0) {\n                dispatch(FetchGenderSuccess(res.data))\n            } else {\n                dispatch(FetchGenderFail())\n            }\n        } catch (error) {\n            dispatch(FetchGenderFail())\n        }\n    }\n};\nexport const FetchGenderSuccess = (genderData) => ({\n    type: actionTypes.FETCH_GENDER_SUCCESS,\n    data: genderData\n});\nexport const FetchGenderFail = () => ({\n    type: actionTypes.FETCH_GENDER_FAIL\n});\nexport const FetchPositionStart = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getallcodeServive('POSITION')\n            if (res && res.errCode === 0) {\n                dispatch(FetchPositionSuccess(res.data))\n            } else {\n                dispatch(FetchPositionFail())\n            }\n        } catch (error) {\n            dispatch(FetchPositionFail())\n        }\n    }\n};\nexport const FetchPositionSuccess = (Data) => ({\n    type: actionTypes.FETCH_POSITION_SUCCESS,\n    data: Data\n});\nexport const FetchPositionFail = () => ({\n    type: actionTypes.FETCH_POSITION_FAIL\n});\nexport const FetchRoleStart = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getallcodeServive('ROLE')\n            if (res && res.errCode === 0) {\n                dispatch(FetchRoleSuccess(res.data))\n            } else {\n                dispatch(FetchRoleFail())\n            }\n        } catch (error) {\n            dispatch(FetchRoleFail())\n        }\n    }\n};\nexport const FetchRoleSuccess = (Data) => ({\n    type: actionTypes.FETCH_ROLEID_SUCCESS,\n    data: Data\n});\n\nexport const FetchRoleFail = () => ({\n    type: actionTypes.FETCH_ROLEID_FAIL\n});\nexport const createNewUser = (data) => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await createNewUserAPI(data)\n            if (res && res.errCode === 0) {\n                toast.success('Create New User Success')\n                dispatch(saveUserSuccess())\n                dispatch(fetchAllUsersStart())\n            } else {\n                toast.error('Create New User Fail, Your email have been used')\n                dispatch(saveUserFail())\n            }\n        } catch (error) {\n            dispatch(saveUserFail())\n        }\n    }\n};\nexport const saveUserSuccess = (data) => ({\n    type: actionTypes.CREATE_USER_SUCCESS,\n    // data: data\n});\nexport const saveUserFail = () => ({\n    type: actionTypes.CREATE_USER_FAIL\n});\nexport const fetchAllUsersStart = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getAllUsers('ALL')\n            if (res && res.errCode === 0) {\n                dispatch(fetchAllUsersSuccess(res.users))\n            } else {\n                toast.error('Fetch All User Error')\n                dispatch(fetchAllUsersFail())\n            }\n        } catch (error) {\n            toast.error('Fetch All User Error')\n            dispatch(fetchAllUsersFail())\n        }\n    }\n};\nexport const fetchAllUsersSuccess = (data) => ({\n    type: actionTypes.FETCH_ALL_USER_SUCCESS,\n    users: data\n});\nexport const fetchAllUsersFail = () => ({\n    type: actionTypes.FETCH_ALL_USER_FAIL\n});\nexport const deleteAUser = (userID) => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await deleteUserAPI(userID)\n            if (res && res.errCode === 0) {\n                dispatch(DeleteAUserSuccess())\n                toast.success('Delete User Success')\n                dispatch(fetchAllUsersStart())\n            } else {\n                toast.error('Delete User Error')\n                dispatch(DeleteUsersFail())\n            }\n        } catch (error) {\n            toast.error('Delete User Error')\n            dispatch(DeleteUsersFail())\n        }\n    }\n};\nexport const DeleteAUserSuccess = () => ({\n    type: actionTypes.DELETE_USER_SUCCESS,\n});\nexport const DeleteUsersFail = () => ({\n    type: actionTypes.DELETE_USER_FAIL\n});\nexport const editAUser = (data) => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await editUserAPI(data)\n            if (res && res.errCode === 0) {\n                toast.success('Update User Success')\n                dispatch(editAUserSuccess())\n                dispatch(fetchAllUsersStart())\n            } else {\n                toast.error('Update User Error')\n                dispatch(editUsersFail())\n            }\n        } catch (error) {\n            dispatch(saveUserFail())\n            toast.error('Update User Error')\n        }\n    }\n};\nexport const editAUserSuccess = () => ({\n    type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUsersFail = () => ({\n    type: actionTypes.EDIT_USER_FAIL\n});\nexport const fetchTopDoctor = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getTopDoctorHomeService('')\n            if (res && res.errCode === 0) {\n                dispatch({\n                    type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\n                    dataDoctors: res.data\n                })\n            } else {\n                dispatch({\n                    type: actionTypes.FETCH_TOP_DOCTOR_FAIL,\n                })\n            }\n        } catch (error) {\n            dispatch({\n                type: actionTypes.FETCH_TOP_DOCTOR_FAIL,\n            })\n        }\n    }\n}\nexport const fetchAllDoctor = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getAllDoctors()\n            if (res && res.errCode === 0) {\n                dispatch({\n                    type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\n                    dataDr: res.data\n                })\n            } else {\n                dispatch({\n                    type: actionTypes.FETCH_ALL_DOCTOR_FAIL,\n                })\n            }\n        } catch (error) {\n            dispatch({\n                type: actionTypes.FETCH_ALL_DOCTOR_FAIL,\n            })\n        }\n    }\n}\nexport const createDetailDoctorAction = (data) => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await createDetailDoctor(data)\n            if (res && res.errCode === 0) {\n                toast.success('Create Detail Dr Success')\n                dispatch({\n                    type: actionTypes.CREATE_DETAIL_DOCTOR_SUCCESS,\n                })\n            } else {\n                toast.error('Create Detail Dr Fail')\n                dispatch({\n                    type: actionTypes.CREATE_DETAIL_DOCTOR_FAIL,\n                })\n            }\n        } catch (error) {\n            toast.error('Create Detail Dr Fail')\n            dispatch({\n                type: actionTypes.CREATE_DETAIL_DOCTOR_FAIL,\n            })\n        }\n    }\n}\nexport const fetchDetailDoctor = (id) => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getDetailInfoDoctor(id)\n            if (res && res.errCode === 0) {\n                dispatch({\n                    type: actionTypes.FETCH_DETAIL_DOCTOR_SUCCESS,\n                    dataDetailDoctor: res.data\n                })\n            } else {\n                dispatch({\n                    type: actionTypes.FETCH_DETAIL_DOCTOR_FAIL,\n                })\n            }\n        } catch (error) {\n            dispatch({\n                type: actionTypes.FETCH_DETAIL_DOCTOR_FAIL,\n            })\n        }\n    }\n}\nexport const fetchAllScheduleTime = () => {\n    return async (dispatch, getState) => {\n        try {\n            let res = await getallcodeServive('TIME')\n            if (res && res.errCode === 0) {\n                dispatch({\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\n                    dataTime: res.data\n                })\n            } else {\n                dispatch({\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAIL,\n                })\n            }\n        } catch (error) {\n            dispatch({\n                type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAIL,\n            })\n        }\n    }\n}\nexport const getAllRequiredDoctorInfo = () => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch({type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_START})\n            let resPrice = await getallcodeServive('PRICE')\n            let resPayment = await getallcodeServive('PAYMENT')\n            let resProvince = await getallcodeServive('PROVINCE')\n            let resCategory = await getallcodeServive('CATEGORY')\n            let resSpecialty = await getAllSpecialty()\n            let resClinic = await getAllClinic()\n            if (resPrice && resPrice.errCode === 0\n                && resPayment && resPayment.errCode === 0\n                && resProvince && resProvince.errCode === 0\n                && resCategory && resCategory.errCode === 0\n                && resSpecialty && resSpecialty.errCode === 0\n                && resClinic && resClinic.errCode === 0\n\n            ) {\n                let data = {\n                    resPrice: resPrice.data,\n                    resPayment: resPayment.data,\n                    resProvince: resProvince.data,\n                    resCategory: resCategory.data,\n                    resSpecialty: resSpecialty.data,\n                    resClinic: resClinic.data\n                }\n                dispatch(FetchRequireDoctorInfoSuccess(data))\n            } else {\n                dispatch(FetchRequireDoctorInfoFail())\n            }\n        } catch (error) {\n            dispatch(FetchRequireDoctorInfoFail())\n        }\n    }\n};\nexport const FetchRequireDoctorInfoSuccess = (allRequiredData) => ({\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS,\n    data: allRequiredData\n})\nexport const FetchRequireDoctorInfoFail = () => ({\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAIL,\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}